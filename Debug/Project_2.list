
Project_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005628  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005900  08005900  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005908  08005908  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  08005980  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08005a20  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000810  200001b0  08005ac0  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200009c0  08005ac0  000209c0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018069  00000000  00000000  000201de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a39  00000000  00000000  00038247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012d8  00000000  00000000  0003ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011d0  00000000  00000000  0003bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029d13  00000000  00000000  0003d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015a9e  00000000  00000000  00066e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104bf4  00000000  00000000  0007c8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001814cd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000549c  00000000  00000000  00181520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	08005810 	.word	0x08005810

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	08005810 	.word	0x08005810

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fe7d 	bl	80012f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f88a 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fa44 	bl	8000a8c <MX_GPIO_Init>
  MX_ETH_Init();
 8000604:	f000 f8f6 	bl	80007f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000608:	f000 f9e2 	bl	80009d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060c:	f000 fa10 	bl	8000a30 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000610:	f000 f98e 	bl	8000930 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000614:	f000 f93c 	bl	8000890 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8000618:	4839      	ldr	r0, [pc, #228]	; (8000700 <main+0x10c>)
 800061a:	f002 ffff 	bl	800361c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800061e:	4839      	ldr	r0, [pc, #228]	; (8000704 <main+0x110>)
 8000620:	f002 fffc 	bl	800361c <HAL_TIM_Base_Start_IT>

  //State[0][0] = 1;
  State[7][0] = false;
 8000624:	4b38      	ldr	r3, [pc, #224]	; (8000708 <main+0x114>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  State[6][0] = false;
 800062c:	4b36      	ldr	r3, [pc, #216]	; (8000708 <main+0x114>)
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  State[5][0] = false;
 8000634:	4b34      	ldr	r3, [pc, #208]	; (8000708 <main+0x114>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  State[4][0] = false;
 800063c:	4b32      	ldr	r3, [pc, #200]	; (8000708 <main+0x114>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2020 	strb.w	r2, [r3, #32]
  State[3][0] = false;
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <main+0x114>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
  State[2][0] = false;
 800064a:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <main+0x114>)
 800064c:	2200      	movs	r2, #0
 800064e:	741a      	strb	r2, [r3, #16]
  State[1][0] = false;
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <main+0x114>)
 8000652:	2200      	movs	r2, #0
 8000654:	721a      	strb	r2, [r3, #8]
  State[0][0] = false;
 8000656:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <main+0x114>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(State[7][0] != NewState[7][0]) {OldState[7][0] = State[7][0]; State[7][0] = NewState[7][0];}
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <main+0x114>)
 800065e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <main+0x118>)
 8000664:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000668:	429a      	cmp	r2, r3
 800066a:	d00b      	beq.n	8000684 <main+0x90>
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <main+0x114>)
 800066e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <main+0x11c>)
 8000674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <main+0x118>)
 800067a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <main+0x114>)
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 if(State[6][0] != NewState[6][0]) {OldState[6][0] = State[6][0]; State[6][0] = NewState[6][0];}
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <main+0x114>)
 8000686:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <main+0x118>)
 800068c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000690:	429a      	cmp	r2, r3
 8000692:	d00b      	beq.n	80006ac <main+0xb8>
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <main+0x114>)
 8000696:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <main+0x11c>)
 800069c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <main+0x118>)
 80006a2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <main+0x114>)
 80006a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	 if(State[5][0] != NewState[5][0]) {OldState[5][0] = State[5][0]; State[5][0] = NewState[5][0];}
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <main+0x114>)
 80006ae:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <main+0x118>)
 80006b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d00b      	beq.n	80006d4 <main+0xe0>
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <main+0x114>)
 80006be:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <main+0x11c>)
 80006c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <main+0x118>)
 80006ca:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <main+0x114>)
 80006d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	 if(State[4][0] != NewState[4][0]) {OldState[4][0] = State[4][0]; State[4][0] = NewState[4][0];}
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <main+0x114>)
 80006d6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <main+0x118>)
 80006dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d0bb      	beq.n	800065c <main+0x68>
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <main+0x114>)
 80006e6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <main+0x11c>)
 80006ec:	f883 2020 	strb.w	r2, [r3, #32]
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <main+0x118>)
 80006f2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <main+0x114>)
 80006f8:	f883 2020 	strb.w	r2, [r3, #32]
	 if(State[7][0] != NewState[7][0]) {OldState[7][0] = State[7][0]; State[7][0] = NewState[7][0];}
 80006fc:	e7ae      	b.n	800065c <main+0x68>
 80006fe:	bf00      	nop
 8000700:	20000344 	.word	0x20000344
 8000704:	200002f8 	.word	0x200002f8
 8000708:	20000968 	.word	0x20000968
 800070c:	200001d0 	.word	0x200001d0
 8000710:	20000928 	.word	0x20000928

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fbfe 	bl	8004f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000738:	f001 fdbc 	bl	80022b4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <SystemClock_Config+0xd8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a2a      	ldr	r2, [pc, #168]	; (80007ec <SystemClock_Config+0xd8>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <SystemClock_Config+0xd8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <SystemClock_Config+0xdc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <SystemClock_Config+0xdc>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <SystemClock_Config+0xdc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000770:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000774:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000784:	23d8      	movs	r3, #216	; 0xd8
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800078c:	2309      	movs	r3, #9
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fdeb 	bl	8002374 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a4:	f000 fa92 	bl	8000ccc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a8:	f001 fd94 	bl	80022d4 <HAL_PWREx_EnableOverDrive>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007b2:	f000 fa8b 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2107      	movs	r1, #7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f87b 	bl	80028d0 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007e0:	f000 fa74 	bl	8000ccc <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3750      	adds	r7, #80	; 0x50
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_ETH_Init+0x84>)
 80007fa:	4a20      	ldr	r2, [pc, #128]	; (800087c <MX_ETH_Init+0x88>)
 80007fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <MX_ETH_Init+0x8c>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_ETH_Init+0x8c>)
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_ETH_Init+0x8c>)
 800080c:	22e1      	movs	r2, #225	; 0xe1
 800080e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_ETH_Init+0x8c>)
 8000812:	2200      	movs	r2, #0
 8000814:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_ETH_Init+0x8c>)
 8000818:	2200      	movs	r2, #0
 800081a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_ETH_Init+0x8c>)
 800081e:	2200      	movs	r2, #0
 8000820:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_ETH_Init+0x84>)
 8000824:	4a16      	ldr	r2, [pc, #88]	; (8000880 <MX_ETH_Init+0x8c>)
 8000826:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_ETH_Init+0x84>)
 800082a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800082e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_ETH_Init+0x84>)
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <MX_ETH_Init+0x90>)
 8000834:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_ETH_Init+0x84>)
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <MX_ETH_Init+0x94>)
 800083a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_ETH_Init+0x84>)
 800083e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000842:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_ETH_Init+0x84>)
 8000846:	f000 fee9 	bl	800161c <HAL_ETH_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 fa3c 	bl	8000ccc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000854:	2238      	movs	r2, #56	; 0x38
 8000856:	2100      	movs	r1, #0
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_ETH_Init+0x98>)
 800085a:	f004 fb63 	bl	8004f24 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_ETH_Init+0x98>)
 8000860:	2221      	movs	r2, #33	; 0x21
 8000862:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_ETH_Init+0x98>)
 8000866:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800086a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_ETH_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000248 	.word	0x20000248
 800087c:	40028000 	.word	0x40028000
 8000880:	20000920 	.word	0x20000920
 8000884:	20000110 	.word	0x20000110
 8000888:	20000070 	.word	0x20000070
 800088c:	20000210 	.word	0x20000210

08000890 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_TIM3_Init+0x98>)
 80008b0:	4a1e      	ldr	r2, [pc, #120]	; (800092c <MX_TIM3_Init+0x9c>)
 80008b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6480-1;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_TIM3_Init+0x98>)
 80008b6:	f641 124f 	movw	r2, #6479	; 0x194f
 80008ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_TIM3_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_TIM3_Init+0x98>)
 80008c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80008c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_TIM3_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_TIM3_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008d6:	4814      	ldr	r0, [pc, #80]	; (8000928 <MX_TIM3_Init+0x98>)
 80008d8:	f002 fe48 	bl	800356c <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80008e2:	f000 f9f3 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_TIM3_Init+0x98>)
 80008f4:	f003 f82a 	bl	800394c <HAL_TIM_ConfigClockSource>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008fe:	f000 f9e5 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <MX_TIM3_Init+0x98>)
 8000910:	f003 fa52 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800091a:	f000 f9d7 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200002f8 	.word	0x200002f8
 800092c:	40000400 	.word	0x40000400

08000930 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_TIM4_Init+0x98>)
 8000950:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <MX_TIM4_Init+0x9c>)
 8000952:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5400-1;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_TIM4_Init+0x98>)
 8000956:	f241 5217 	movw	r2, #5399	; 0x1517
 800095a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_TIM4_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_TIM4_Init+0x98>)
 8000964:	f242 720f 	movw	r2, #9999	; 0x270f
 8000968:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_TIM4_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_TIM4_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000976:	4814      	ldr	r0, [pc, #80]	; (80009c8 <MX_TIM4_Init+0x98>)
 8000978:	f002 fdf8 	bl	800356c <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000982:	f000 f9a3 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4619      	mov	r1, r3
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_TIM4_Init+0x98>)
 8000994:	f002 ffda 	bl	800394c <HAL_TIM_ConfigClockSource>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800099e:	f000 f995 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_TIM4_Init+0x98>)
 80009b0:	f003 fa02 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80009ba:	f000 f987 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000344 	.word	0x20000344
 80009cc:	40000800 	.word	0x40000800

080009d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009d6:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <MX_USART3_UART_Init+0x5c>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART3_UART_Init+0x58>)
 8000a14:	f003 fa7c 	bl	8003f10 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a1e:	f000 f955 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000390 	.word	0x20000390
 8000a2c:	40004800 	.word	0x40004800

08000a30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3e:	2206      	movs	r2, #6
 8000a40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a50:	2202      	movs	r2, #2
 8000a52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a74:	f001 fad5 	bl	8002022 <HAL_PCD_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a7e:	f000 f925 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000418 	.word	0x20000418

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b53      	ldr	r3, [pc, #332]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a52      	ldr	r2, [pc, #328]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b50      	ldr	r3, [pc, #320]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aba:	4b4d      	ldr	r3, [pc, #308]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a4c      	ldr	r2, [pc, #304]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b4a      	ldr	r3, [pc, #296]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	4b47      	ldr	r3, [pc, #284]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a46      	ldr	r2, [pc, #280]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b44      	ldr	r3, [pc, #272]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b41      	ldr	r3, [pc, #260]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a40      	ldr	r2, [pc, #256]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b3e      	ldr	r3, [pc, #248]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a3a      	ldr	r2, [pc, #232]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1a:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a34      	ldr	r2, [pc, #208]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <MX_GPIO_Init+0x164>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b50:	4828      	ldr	r0, [pc, #160]	; (8000bf4 <MX_GPIO_Init+0x168>)
 8000b52:	f001 fa4d 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2140      	movs	r1, #64	; 0x40
 8000b5a:	4827      	ldr	r0, [pc, #156]	; (8000bf8 <MX_GPIO_Init+0x16c>)
 8000b5c:	f001 fa48 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4821      	ldr	r0, [pc, #132]	; (8000bfc <MX_GPIO_Init+0x170>)
 8000b78:	f001 f876 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000b7c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	481b      	ldr	r0, [pc, #108]	; (8000c00 <MX_GPIO_Init+0x174>)
 8000b92:	f001 f869 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b96:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <MX_GPIO_Init+0x168>)
 8000bb0:	f001 f85a 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_OverCurrent_Pin;
 8000bb4:	2382      	movs	r3, #130	; 0x82
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_GPIO_Init+0x16c>)
 8000bc8:	f001 f84e 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_GPIO_Init+0x16c>)
 8000be4:	f001 f840 	bl	8001c68 <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40021800 	.word	0x40021800
 8000bfc:	40020800 	.word	0x40020800
 8000c00:	40021400 	.word	0x40021400

08000c04 <displayOld_State>:
	HAL_UART_Transmit(&huart3, (uint32_t *) buffer, strlen(buffer), 1000);
}

//========================== DisPlay State [4][4] ======================================//
extern void displayOld_State(bool a4, bool a3, bool a2, bool a1)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b09f      	sub	sp, #124	; 0x7c
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4623      	mov	r3, r4
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	4603      	mov	r3, r0
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	717b      	strb	r3, [r7, #5]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	713b      	strb	r3, [r7, #4]
	char buffer[100];

	sprintf(buffer,"OldState: \t%d\n\r\t\t%d\n\r\t\t%d\n\r\t\t%d\n\r-----------------------\n\r", a4, a3, a2, a1);
 8000c22:	79f9      	ldrb	r1, [r7, #7]
 8000c24:	79bc      	ldrb	r4, [r7, #6]
 8000c26:	797b      	ldrb	r3, [r7, #5]
 8000c28:	793a      	ldrb	r2, [r7, #4]
 8000c2a:	f107 000c 	add.w	r0, r7, #12
 8000c2e:	9201      	str	r2, [sp, #4]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	4623      	mov	r3, r4
 8000c34:	460a      	mov	r2, r1
 8000c36:	490a      	ldr	r1, [pc, #40]	; (8000c60 <displayOld_State+0x5c>)
 8000c38:	f004 f97c 	bl	8004f34 <siprintf>
	HAL_UART_Transmit(&huart3, (uint32_t *) buffer, strlen(buffer), 1000);
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fafd 	bl	8000240 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	f107 010c 	add.w	r1, r7, #12
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	4804      	ldr	r0, [pc, #16]	; (8000c64 <displayOld_State+0x60>)
 8000c54:	f003 f9aa 	bl	8003fac <HAL_UART_Transmit>
}
 8000c58:	bf00      	nop
 8000c5a:	3774      	adds	r7, #116	; 0x74
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	0800583c 	.word	0x0800583c
 8000c64:	20000390 	.word	0x20000390

08000c68 <displayNew_State>:

//========================== DisPlay New State [4][4] ======================================//
extern void displayNew_State(bool a4, bool a3, bool a2, bool a1)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b09f      	sub	sp, #124	; 0x7c
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4608      	mov	r0, r1
 8000c72:	4611      	mov	r1, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	4623      	mov	r3, r4
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71bb      	strb	r3, [r7, #6]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	717b      	strb	r3, [r7, #5]
 8000c82:	4613      	mov	r3, r2
 8000c84:	713b      	strb	r3, [r7, #4]
	char buffer[100];

	sprintf(buffer,"NewState: \t%d\n\r\t\t%d\n\r\t\t%d\n\r\t\t%d\n\r=======================\n\r", a4, a3, a2, a1);
 8000c86:	79f9      	ldrb	r1, [r7, #7]
 8000c88:	79bc      	ldrb	r4, [r7, #6]
 8000c8a:	797b      	ldrb	r3, [r7, #5]
 8000c8c:	793a      	ldrb	r2, [r7, #4]
 8000c8e:	f107 000c 	add.w	r0, r7, #12
 8000c92:	9201      	str	r2, [sp, #4]
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	4623      	mov	r3, r4
 8000c98:	460a      	mov	r2, r1
 8000c9a:	490a      	ldr	r1, [pc, #40]	; (8000cc4 <displayNew_State+0x5c>)
 8000c9c:	f004 f94a 	bl	8004f34 <siprintf>
	HAL_UART_Transmit(&huart3, (uint32_t *) buffer, strlen(buffer), 1000);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff facb 	bl	8000240 <strlen>
 8000caa:	4603      	mov	r3, r0
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	f107 010c 	add.w	r1, r7, #12
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <displayNew_State+0x60>)
 8000cb8:	f003 f978 	bl	8003fac <HAL_UART_Transmit>
}
 8000cbc:	bf00      	nop
 8000cbe:	3774      	adds	r7, #116	; 0x74
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	08005878 	.word	0x08005878
 8000cc8:	20000390 	.word	0x20000390

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>
	...

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_MspInit+0x44>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <HAL_MspInit+0x44>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_MspInit+0x44>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x44>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x44>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x44>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000d0e:	2005      	movs	r0, #5
 8000d10:	f000 fc42 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	; 0x38
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_ETH_MspInit+0x158>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	f040 8096 	bne.w	8000e70 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d44:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a4c      	ldr	r2, [pc, #304]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b4a      	ldr	r3, [pc, #296]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	4b47      	ldr	r3, [pc, #284]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a46      	ldr	r2, [pc, #280]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	4b41      	ldr	r3, [pc, #260]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a40      	ldr	r2, [pc, #256]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	4a3a      	ldr	r2, [pc, #232]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
 8000d98:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b32      	ldr	r3, [pc, #200]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbc:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a2e      	ldr	r2, [pc, #184]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_ETH_MspInit+0x15c>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dec:	2332      	movs	r3, #50	; 0x32
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfc:	230b      	movs	r3, #11
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	481e      	ldr	r0, [pc, #120]	; (8000e80 <HAL_ETH_MspInit+0x160>)
 8000e08:	f000 ff2e 	bl	8001c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e0c:	2386      	movs	r3, #134	; 0x86
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1c:	230b      	movs	r3, #11
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <HAL_ETH_MspInit+0x164>)
 8000e28:	f000 ff1e 	bl	8001c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3e:	230b      	movs	r3, #11
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <HAL_ETH_MspInit+0x168>)
 8000e4a:	f000 ff0d 	bl	8001c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4808      	ldr	r0, [pc, #32]	; (8000e8c <HAL_ETH_MspInit+0x16c>)
 8000e6c:	f000 fefc 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3738      	adds	r7, #56	; 0x38
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40028000 	.word	0x40028000
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40021800 	.word	0x40021800

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <HAL_TIM_Base_MspInit+0x78>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d114      	bne.n	8000ecc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_TIM_Base_MspInit+0x7c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <HAL_TIM_Base_MspInit+0x7c>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_TIM_Base_MspInit+0x7c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	201d      	movs	r0, #29
 8000ec0:	f000 fb75 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ec4:	201d      	movs	r0, #29
 8000ec6:	f000 fb8e 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000eca:	e018      	b.n	8000efe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <HAL_TIM_Base_MspInit+0x80>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d113      	bne.n	8000efe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_TIM_Base_MspInit+0x7c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_TIM_Base_MspInit+0x7c>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_TIM_Base_MspInit+0x7c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	201e      	movs	r0, #30
 8000ef4:	f000 fb5b 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ef8:	201e      	movs	r0, #30
 8000efa:	f000 fb74 	bl	80015e6 <HAL_NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40000400 	.word	0x40000400
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40000800 	.word	0x40000800

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ae      	sub	sp, #184	; 0xb8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2290      	movs	r2, #144	; 0x90
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fff5 	bl	8004f24 <memset>
  if(huart->Instance==USART3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <HAL_UART_MspInit+0xb4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d13c      	bne.n	8000fbe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fee2 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f5e:	f7ff feb5 	bl	8000ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fac:	2307      	movs	r3, #7
 8000fae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <HAL_UART_MspInit+0xbc>)
 8000fba:	f000 fe55 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	37b8      	adds	r7, #184	; 0xb8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004800 	.word	0x40004800
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020c00 	.word	0x40020c00

08000fd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0ae      	sub	sp, #184	; 0xb8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2290      	movs	r2, #144	; 0x90
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 ff95 	bl	8004f24 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001002:	d159      	bne.n	80010b8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001004:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001008:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4618      	mov	r0, r3
 8001016:	f001 fe81 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001020:	f7ff fe54 	bl	8000ccc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_PCD_MspInit+0xec>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a25      	ldr	r2, [pc, #148]	; (80010c0 <HAL_PCD_MspInit+0xec>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_PCD_MspInit+0xec>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800103c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001040:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001056:	230a      	movs	r3, #10
 8001058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001060:	4619      	mov	r1, r3
 8001062:	4818      	ldr	r0, [pc, #96]	; (80010c4 <HAL_PCD_MspInit+0xf0>)
 8001064:	f000 fe00 	bl	8001c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001080:	4619      	mov	r1, r3
 8001082:	4810      	ldr	r0, [pc, #64]	; (80010c4 <HAL_PCD_MspInit+0xf0>)
 8001084:	f000 fdf0 	bl	8001c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_PCD_MspInit+0xec>)
 800108a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_PCD_MspInit+0xec>)
 800108e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001092:	6353      	str	r3, [r2, #52]	; 0x34
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_PCD_MspInit+0xec>)
 8001096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <HAL_PCD_MspInit+0xec>)
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_PCD_MspInit+0xec>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6453      	str	r3, [r2, #68]	; 0x44
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_PCD_MspInit+0xec>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	37b8      	adds	r7, #184	; 0xb8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <DebugMon_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void DebugMon_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SVC_Handler>:

void SVC_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:
  */
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f92c 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	CountTim4++;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <TIM3_IRQHandler+0x5c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <TIM3_IRQHandler+0x5c>)
 8001128:	6013      	str	r3, [r2, #0]
	//displayNumber(CountTim4);
	displayOld_State(OldState[7][0], OldState[6][0], OldState[5][0], OldState[4][0]);
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <TIM3_IRQHandler+0x60>)
 800112c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001130:	4618      	mov	r0, r3
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <TIM3_IRQHandler+0x60>)
 8001134:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001138:	4619      	mov	r1, r3
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <TIM3_IRQHandler+0x60>)
 800113c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001140:	461a      	mov	r2, r3
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <TIM3_IRQHandler+0x60>)
 8001144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001148:	f7ff fd5c 	bl	8000c04 <displayOld_State>
	displayNew_State(NewState[7][0], NewState[6][0], NewState[5][0], NewState[4][0]);
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <TIM3_IRQHandler+0x64>)
 800114e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001152:	4618      	mov	r0, r3
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <TIM3_IRQHandler+0x64>)
 8001156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800115a:	4619      	mov	r1, r3
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <TIM3_IRQHandler+0x64>)
 800115e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001162:	461a      	mov	r2, r3
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <TIM3_IRQHandler+0x64>)
 8001166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800116a:	f7ff fd7d 	bl	8000c68 <displayNew_State>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <TIM3_IRQHandler+0x68>)
 8001170:	f002 facc 	bl	800370c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200001cc 	.word	0x200001cc
 800117c:	20000928 	.word	0x20000928
 8001180:	200001d0 	.word	0x200001d0
 8001184:	200002f8 	.word	0x200002f8

08001188 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	//================================ Scan Board ================================//
	//	 a4 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
	//	 a3 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
	//	 a2 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
	//	 a1 = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1);
	NewState[7][0] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 800118c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001190:	481c      	ldr	r0, [pc, #112]	; (8001204 <TIM4_IRQHandler+0x7c>)
 8001192:	f000 ff15 	bl	8001fc0 <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <TIM4_IRQHandler+0x80>)
 80011a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	NewState[6][0] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	4816      	ldr	r0, [pc, #88]	; (8001204 <TIM4_IRQHandler+0x7c>)
 80011ac:	f000 ff08 	bl	8001fc0 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf14      	ite	ne
 80011b6:	2301      	movne	r3, #1
 80011b8:	2300      	moveq	r3, #0
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <TIM4_IRQHandler+0x80>)
 80011be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	NewState[5][0] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 80011c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c6:	480f      	ldr	r0, [pc, #60]	; (8001204 <TIM4_IRQHandler+0x7c>)
 80011c8:	f000 fefa 	bl	8001fc0 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <TIM4_IRQHandler+0x80>)
 80011da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	NewState[4][0] = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1);
 80011de:	2102      	movs	r1, #2
 80011e0:	480a      	ldr	r0, [pc, #40]	; (800120c <TIM4_IRQHandler+0x84>)
 80011e2:	f000 feed 	bl	8001fc0 <HAL_GPIO_ReadPin>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <TIM4_IRQHandler+0x80>)
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <TIM4_IRQHandler+0x88>)
 80011fa:	f002 fa87 	bl	800370c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021400 	.word	0x40021400
 8001208:	200001d0 	.word	0x200001d0
 800120c:	40021800 	.word	0x40021800
 8001210:	20000344 	.word	0x20000344

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f003 fe44 	bl	8004ed0 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20080000 	.word	0x20080000
 8001274:	00000400 	.word	0x00000400
 8001278:	200009a8 	.word	0x200009a8
 800127c:	200009c0 	.word	0x200009c0

08001280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ce:	f7ff ffd7 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f003 fe03 	bl	8004edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff f98d 	bl	80005f4 <main>
  bx  lr    
 80012da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012e8:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 80012ec:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80012f0:	200009c0 	.word	0x200009c0

080012f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC_IRQHandler>

080012f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 f94c 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001300:	2000      	movs	r0, #0
 8001302:	f000 f805 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001306:	f7ff fce7 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f967 	bl	8001602 <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f92f 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008
 8001394:	200009ac 	.word	0x200009ac

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200009ac 	.word	0x200009ac

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffde 	bl	8001398 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <__NVIC_SetPriorityGrouping+0x40>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	4313      	orrs	r3, r2
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x40>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00
 800143c:	05fa0000 	.word	0x05fa0000

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff29 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff3e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff31 	bl	800145c <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06a      	b.n	8001704 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001634:	2b00      	cmp	r3, #0
 8001636:	d106      	bne.n	8001646 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2223      	movs	r2, #35	; 0x23
 800163c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fb6d 	bl	8000d20 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b31      	ldr	r3, [pc, #196]	; (800170c <HAL_ETH_Init+0xf0>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_ETH_Init+0xf0>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_ETH_Init+0xf0>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800165e:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <HAL_ETH_Init+0xf4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a2b      	ldr	r2, [pc, #172]	; (8001710 <HAL_ETH_Init+0xf4>)
 8001664:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001668:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <HAL_ETH_Init+0xf4>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4927      	ldr	r1, [pc, #156]	; (8001710 <HAL_ETH_Init+0xf4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_ETH_Init+0xf4>)
 800167a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001692:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001694:	f7ff fe80 	bl	8001398 <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800169a:	e011      	b.n	80016c0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800169c:	f7ff fe7c 	bl	8001398 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016aa:	d909      	bls.n	80016c0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2204      	movs	r2, #4
 80016b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	22e0      	movs	r2, #224	; 0xe0
 80016b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e021      	b.n	8001704 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1e4      	bne.n	800169c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f958 	bl	8001988 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f9ff 	bl	8001adc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 fa55 	bl	8001b8e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	461a      	mov	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f9bd 	bl	8001a6c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2210      	movs	r2, #16
 80016fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800

08001714 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <ETH_SetMACConfig+0x15c>)
 800172a:	4013      	ands	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	7c1b      	ldrb	r3, [r3, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <ETH_SetMACConfig+0x28>
 8001736:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800173a:	e000      	b.n	800173e <ETH_SetMACConfig+0x2a>
 800173c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	7c5b      	ldrb	r3, [r3, #17]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <ETH_SetMACConfig+0x38>
 8001746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800174a:	e000      	b.n	800174e <ETH_SetMACConfig+0x3a>
 800174c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800174e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001754:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	7fdb      	ldrb	r3, [r3, #31]
 800175a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800175c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001762:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	7f92      	ldrb	r2, [r2, #30]
 8001768:	2a00      	cmp	r2, #0
 800176a:	d102      	bne.n	8001772 <ETH_SetMACConfig+0x5e>
 800176c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001770:	e000      	b.n	8001774 <ETH_SetMACConfig+0x60>
 8001772:	2200      	movs	r2, #0
                        macconf->Speed |
 8001774:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	7f1b      	ldrb	r3, [r3, #28]
 800177a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800177c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001782:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	791b      	ldrb	r3, [r3, #4]
 8001788:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800178a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001792:	2a00      	cmp	r2, #0
 8001794:	d102      	bne.n	800179c <ETH_SetMACConfig+0x88>
 8001796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179a:	e000      	b.n	800179e <ETH_SetMACConfig+0x8a>
 800179c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800179e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	7bdb      	ldrb	r3, [r3, #15]
 80017a4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017a6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017b4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017b6:	4313      	orrs	r3, r2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f7ff fdee 	bl	80013b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80017ea:	4013      	ands	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d101      	bne.n	8001802 <ETH_SetMACConfig+0xee>
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	e000      	b.n	8001804 <ETH_SetMACConfig+0xf0>
 8001802:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001804:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800180a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001812:	2a01      	cmp	r2, #1
 8001814:	d101      	bne.n	800181a <ETH_SetMACConfig+0x106>
 8001816:	2208      	movs	r2, #8
 8001818:	e000      	b.n	800181c <ETH_SetMACConfig+0x108>
 800181a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800181c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001824:	2a01      	cmp	r2, #1
 8001826:	d101      	bne.n	800182c <ETH_SetMACConfig+0x118>
 8001828:	2204      	movs	r2, #4
 800182a:	e000      	b.n	800182e <ETH_SetMACConfig+0x11a>
 800182c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800182e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001836:	2a01      	cmp	r2, #1
 8001838:	d101      	bne.n	800183e <ETH_SetMACConfig+0x12a>
 800183a:	2202      	movs	r2, #2
 800183c:	e000      	b.n	8001840 <ETH_SetMACConfig+0x12c>
 800183e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001840:	4313      	orrs	r3, r2
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff fda9 	bl	80013b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	619a      	str	r2, [r3, #24]
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	ff20810f 	.word	0xff20810f

08001874 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <ETH_SetDMAConfig+0x110>)
 800188e:	4013      	ands	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	7b1b      	ldrb	r3, [r3, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <ETH_SetDMAConfig+0x2c>
 800189a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800189e:	e000      	b.n	80018a2 <ETH_SetDMAConfig+0x2e>
 80018a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	7b5b      	ldrb	r3, [r3, #13]
 80018a6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018a8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	7f52      	ldrb	r2, [r2, #29]
 80018ae:	2a00      	cmp	r2, #0
 80018b0:	d102      	bne.n	80018b8 <ETH_SetDMAConfig+0x44>
 80018b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018b6:	e000      	b.n	80018ba <ETH_SetDMAConfig+0x46>
 80018b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	7b9b      	ldrb	r3, [r3, #14]
 80018c0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018c2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	7f1b      	ldrb	r3, [r3, #28]
 80018ce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80018d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	7f9b      	ldrb	r3, [r3, #30]
 80018d6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018d8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018e8:	4313      	orrs	r3, r2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f8:	461a      	mov	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800190a:	2001      	movs	r0, #1
 800190c:	f7ff fd50 	bl	80013b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001918:	461a      	mov	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	791b      	ldrb	r3, [r3, #4]
 8001922:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001928:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800192e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001934:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800193c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800193e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001946:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800194c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800195a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff fd21 	bl	80013b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	f8de3f23 	.word	0xf8de3f23

08001988 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b0a6      	sub	sp, #152	; 0x98
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001990:	2301      	movs	r3, #1
 8001992:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800199c:	2300      	movs	r3, #0
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019c4:	2300      	movs	r3, #0
 80019c6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80019fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fe86 	bl	8001714 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a10:	2301      	movs	r3, #1
 8001a12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a16:	2301      	movs	r3, #1
 8001a18:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a34:	2301      	movs	r3, #1
 8001a36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a3c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff08 	bl	8001874 <ETH_SetDMAConfig>
}
 8001a64:	bf00      	nop
 8001a66:	3798      	adds	r7, #152	; 0x98
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3305      	adds	r3, #5
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	3204      	adds	r2, #4
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <ETH_MACAddressConfig+0x68>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	461a      	mov	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3303      	adds	r3, #3
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	061a      	lsls	r2, r3, #24
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	041b      	lsls	r3, r3, #16
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <ETH_MACAddressConfig+0x6c>)
 8001abe:	4413      	add	r3, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	6013      	str	r3, [r2, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40028040 	.word	0x40028040
 8001ad8:	40028044 	.word	0x40028044

08001adc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e03e      	b.n	8001b68 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68d9      	ldr	r1, [r3, #12]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	3206      	adds	r2, #6
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d80c      	bhi.n	8001b4c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68d9      	ldr	r1, [r3, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	461a      	mov	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	e004      	b.n	8001b56 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	461a      	mov	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3301      	adds	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d9bd      	bls.n	8001aea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b80:	611a      	str	r2, [r3, #16]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	e046      	b.n	8001c2a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6919      	ldr	r1, [r3, #16]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001be0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	3212      	adds	r2, #18
 8001bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d80c      	bhi.n	8001c1a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6919      	ldr	r1, [r3, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	e004      	b.n	8001c24 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d9b5      	bls.n	8001b9c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5a:	60da      	str	r2, [r3, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e175      	b.n	8001f74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 8164 	bne.w	8001f6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d005      	beq.n	8001cbe <HAL_GPIO_Init+0x56>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d130      	bne.n	8001d20 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 0201 	and.w	r2, r3, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d017      	beq.n	8001d5c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80be 	beq.w	8001f6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b66      	ldr	r3, [pc, #408]	; (8001f8c <HAL_GPIO_Init+0x324>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a65      	ldr	r2, [pc, #404]	; (8001f8c <HAL_GPIO_Init+0x324>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <HAL_GPIO_Init+0x324>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e0a:	4a61      	ldr	r2, [pc, #388]	; (8001f90 <HAL_GPIO_Init+0x328>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a58      	ldr	r2, [pc, #352]	; (8001f94 <HAL_GPIO_Init+0x32c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d037      	beq.n	8001ea6 <HAL_GPIO_Init+0x23e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a57      	ldr	r2, [pc, #348]	; (8001f98 <HAL_GPIO_Init+0x330>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d031      	beq.n	8001ea2 <HAL_GPIO_Init+0x23a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <HAL_GPIO_Init+0x334>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d02b      	beq.n	8001e9e <HAL_GPIO_Init+0x236>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a55      	ldr	r2, [pc, #340]	; (8001fa0 <HAL_GPIO_Init+0x338>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d025      	beq.n	8001e9a <HAL_GPIO_Init+0x232>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a54      	ldr	r2, [pc, #336]	; (8001fa4 <HAL_GPIO_Init+0x33c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d01f      	beq.n	8001e96 <HAL_GPIO_Init+0x22e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a53      	ldr	r2, [pc, #332]	; (8001fa8 <HAL_GPIO_Init+0x340>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x22a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a52      	ldr	r2, [pc, #328]	; (8001fac <HAL_GPIO_Init+0x344>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x226>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a51      	ldr	r2, [pc, #324]	; (8001fb0 <HAL_GPIO_Init+0x348>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x222>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a50      	ldr	r2, [pc, #320]	; (8001fb4 <HAL_GPIO_Init+0x34c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x21e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4f      	ldr	r2, [pc, #316]	; (8001fb8 <HAL_GPIO_Init+0x350>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x21a>
 8001e7e:	2309      	movs	r3, #9
 8001e80:	e012      	b.n	8001ea8 <HAL_GPIO_Init+0x240>
 8001e82:	230a      	movs	r3, #10
 8001e84:	e010      	b.n	8001ea8 <HAL_GPIO_Init+0x240>
 8001e86:	2308      	movs	r3, #8
 8001e88:	e00e      	b.n	8001ea8 <HAL_GPIO_Init+0x240>
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	e00c      	b.n	8001ea8 <HAL_GPIO_Init+0x240>
 8001e8e:	2306      	movs	r3, #6
 8001e90:	e00a      	b.n	8001ea8 <HAL_GPIO_Init+0x240>
 8001e92:	2305      	movs	r3, #5
 8001e94:	e008      	b.n	8001ea8 <HAL_GPIO_Init+0x240>
 8001e96:	2304      	movs	r3, #4
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x240>
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e004      	b.n	8001ea8 <HAL_GPIO_Init+0x240>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_Init+0x240>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x240>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f002 0203 	and.w	r2, r2, #3
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001eb8:	4935      	ldr	r1, [pc, #212]	; (8001f90 <HAL_GPIO_Init+0x328>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_GPIO_Init+0x354>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eea:	4a34      	ldr	r2, [pc, #208]	; (8001fbc <HAL_GPIO_Init+0x354>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef0:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_GPIO_Init+0x354>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <HAL_GPIO_Init+0x354>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1a:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_GPIO_Init+0x354>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3e:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <HAL_GPIO_Init+0x354>)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_GPIO_Init+0x354>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <HAL_GPIO_Init+0x354>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b0f      	cmp	r3, #15
 8001f78:	f67f ae86 	bls.w	8001c88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40013800 	.word	0x40013800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40021400 	.word	0x40021400
 8001fac:	40021800 	.word	0x40021800
 8001fb0:	40021c00 	.word	0x40021c00
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40022400 	.word	0x40022400
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	e001      	b.n	8001fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800200c:	e003      	b.n	8002016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	041a      	lsls	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	619a      	str	r2, [r3, #24]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002022:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002024:	b08f      	sub	sp, #60	; 0x3c
 8002026:	af0a      	add	r7, sp, #40	; 0x28
 8002028:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e116      	b.n	8002262 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe ffc0 	bl	8000fd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2203      	movs	r2, #3
 8002058:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f002 fc90 	bl	8004998 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	687e      	ldr	r6, [r7, #4]
 8002080:	466d      	mov	r5, sp
 8002082:	f106 0410 	add.w	r4, r6, #16
 8002086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002092:	e885 0003 	stmia.w	r5, {r0, r1}
 8002096:	1d33      	adds	r3, r6, #4
 8002098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209a:	6838      	ldr	r0, [r7, #0]
 800209c:	f002 fc24 	bl	80048e8 <USB_CoreInit>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0d7      	b.n	8002262 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fc7e 	bl	80049ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e04a      	b.n	800215a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	333d      	adds	r3, #61	; 0x3d
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	333c      	adds	r3, #60	; 0x3c
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	b298      	uxth	r0, r3
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	3344      	adds	r3, #68	; 0x44
 8002100:	4602      	mov	r2, r0
 8002102:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3340      	adds	r3, #64	; 0x40
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3348      	adds	r3, #72	; 0x48
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	334c      	adds	r3, #76	; 0x4c
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3354      	adds	r3, #84	; 0x54
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	3301      	adds	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	d3af      	bcc.n	80020c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e044      	b.n	80021f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	3301      	adds	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d3b5      	bcc.n	800216a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	687e      	ldr	r6, [r7, #4]
 8002206:	466d      	mov	r5, sp
 8002208:	f106 0410 	add.w	r4, r6, #16
 800220c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002214:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002218:	e885 0003 	stmia.w	r5, {r0, r1}
 800221c:	1d33      	adds	r3, r6, #4
 800221e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002220:	6838      	ldr	r0, [r7, #0]
 8002222:	f002 fc17 	bl	8004a54 <USB_DevInit>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e014      	b.n	8002262 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	2b01      	cmp	r3, #1
 800224e:	d102      	bne.n	8002256 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f80b 	bl	800226c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 fdd5 	bl	8004e0a <USB_DevDisconnect>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800226c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800229c:	4313      	orrs	r3, r2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	10000003 	.word	0x10000003

080022b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40007000 	.word	0x40007000

080022d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b23      	ldr	r3, [pc, #140]	; (800236c <HAL_PWREx_EnableOverDrive+0x98>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a22      	ldr	r2, [pc, #136]	; (800236c <HAL_PWREx_EnableOverDrive+0x98>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_PWREx_EnableOverDrive+0x98>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1d      	ldr	r2, [pc, #116]	; (8002370 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002302:	f7ff f849 	bl	8001398 <HAL_GetTick>
 8002306:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002308:	e009      	b.n	800231e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800230a:	f7ff f845 	bl	8001398 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002318:	d901      	bls.n	800231e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e022      	b.n	8002364 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232a:	d1ee      	bne.n	800230a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_PWREx_EnableOverDrive+0x9c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002336:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002338:	f7ff f82e 	bl	8001398 <HAL_GetTick>
 800233c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800233e:	e009      	b.n	8002354 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002340:	f7ff f82a 	bl	8001398 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800234e:	d901      	bls.n	8002354 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e007      	b.n	8002364 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002360:	d1ee      	bne.n	8002340 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	40007000 	.word	0x40007000

08002374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e29b      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8087 	beq.w	80024a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002398:	4b96      	ldr	r3, [pc, #600]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d00c      	beq.n	80023be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a4:	4b93      	ldr	r3, [pc, #588]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d112      	bne.n	80023d6 <HAL_RCC_OscConfig+0x62>
 80023b0:	4b90      	ldr	r3, [pc, #576]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023bc:	d10b      	bne.n	80023d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023be:	4b8d      	ldr	r3, [pc, #564]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d06c      	beq.n	80024a4 <HAL_RCC_OscConfig+0x130>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d168      	bne.n	80024a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e275      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x7a>
 80023e0:	4b84      	ldr	r3, [pc, #528]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a83      	ldr	r2, [pc, #524]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	e02e      	b.n	800244c <HAL_RCC_OscConfig+0xd8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x9c>
 80023f6:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7e      	ldr	r2, [pc, #504]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80023fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a7b      	ldr	r2, [pc, #492]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e01d      	b.n	800244c <HAL_RCC_OscConfig+0xd8>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0xc0>
 800241a:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a75      	ldr	r2, [pc, #468]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b73      	ldr	r3, [pc, #460]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a72      	ldr	r2, [pc, #456]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0xd8>
 8002434:	4b6f      	ldr	r3, [pc, #444]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a6e      	ldr	r2, [pc, #440]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 800243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b6c      	ldr	r3, [pc, #432]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6b      	ldr	r2, [pc, #428]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d013      	beq.n	800247c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe ffa0 	bl	8001398 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe ff9c 	bl	8001398 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e229      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0xe8>
 800247a:	e014      	b.n	80024a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe ff8c 	bl	8001398 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe ff88 	bl	8001398 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e215      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x110>
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d069      	beq.n	8002586 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024b2:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024be:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d11c      	bne.n	8002504 <HAL_RCC_OscConfig+0x190>
 80024ca:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d116      	bne.n	8002504 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_RCC_OscConfig+0x17a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e1e9      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	493d      	ldr	r1, [pc, #244]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	e040      	b.n	8002586 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d023      	beq.n	8002554 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a38      	ldr	r2, [pc, #224]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe ff3e 	bl	8001398 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002520:	f7fe ff3a 	bl	8001398 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1c7      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4929      	ldr	r1, [pc, #164]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
 8002552:	e018      	b.n	8002586 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe ff1a 	bl	8001398 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002568:	f7fe ff16 	bl	8001398 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1a3      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d038      	beq.n	8002604 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d019      	beq.n	80025ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 800259c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fef7 	bl	8001398 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ae:	f7fe fef3 	bl	8001398 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e180      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80025c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x23a>
 80025cc:	e01a      	b.n	8002604 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80025d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <HAL_RCC_OscConfig+0x280>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025da:	f7fe fedd 	bl	8001398 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e2:	f7fe fed9 	bl	8001398 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d903      	bls.n	80025f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e166      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
 80025f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f8:	4b92      	ldr	r3, [pc, #584]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80025fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1ee      	bne.n	80025e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a4 	beq.w	800275a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002612:	4b8c      	ldr	r3, [pc, #560]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10d      	bne.n	800263a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b89      	ldr	r3, [pc, #548]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a88      	ldr	r2, [pc, #544]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
 800262a:	4b86      	ldr	r3, [pc, #536]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263a:	4b83      	ldr	r3, [pc, #524]	; (8002848 <HAL_RCC_OscConfig+0x4d4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d118      	bne.n	8002678 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002646:	4b80      	ldr	r3, [pc, #512]	; (8002848 <HAL_RCC_OscConfig+0x4d4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7f      	ldr	r2, [pc, #508]	; (8002848 <HAL_RCC_OscConfig+0x4d4>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002652:	f7fe fea1 	bl	8001398 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7fe fe9d 	bl	8001398 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b64      	cmp	r3, #100	; 0x64
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e12a      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266c:	4b76      	ldr	r3, [pc, #472]	; (8002848 <HAL_RCC_OscConfig+0x4d4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x31a>
 8002680:	4b70      	ldr	r3, [pc, #448]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	4a6f      	ldr	r2, [pc, #444]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6713      	str	r3, [r2, #112]	; 0x70
 800268c:	e02d      	b.n	80026ea <HAL_RCC_OscConfig+0x376>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x33c>
 8002696:	4b6b      	ldr	r3, [pc, #428]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a6a      	ldr	r2, [pc, #424]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70
 80026a2:	4b68      	ldr	r3, [pc, #416]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	4a67      	ldr	r2, [pc, #412]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	6713      	str	r3, [r2, #112]	; 0x70
 80026ae:	e01c      	b.n	80026ea <HAL_RCC_OscConfig+0x376>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCC_OscConfig+0x35e>
 80026b8:	4b62      	ldr	r3, [pc, #392]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a61      	ldr	r2, [pc, #388]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
 80026c4:	4b5f      	ldr	r3, [pc, #380]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a5e      	ldr	r2, [pc, #376]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	e00b      	b.n	80026ea <HAL_RCC_OscConfig+0x376>
 80026d2:	4b5c      	ldr	r3, [pc, #368]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a5b      	ldr	r2, [pc, #364]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d015      	beq.n	800271e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f2:	f7fe fe51 	bl	8001398 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe fe4d 	bl	8001398 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0d8      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ee      	beq.n	80026fa <HAL_RCC_OscConfig+0x386>
 800271c:	e014      	b.n	8002748 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7fe fe3b 	bl	8001398 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7fe fe37 	bl	8001398 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0c2      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ee      	bne.n	8002726 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a3c      	ldr	r2, [pc, #240]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80ae 	beq.w	80028c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002764:	4b37      	ldr	r3, [pc, #220]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d06d      	beq.n	800284c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d14b      	bne.n	8002810 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002778:	4b32      	ldr	r3, [pc, #200]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a31      	ldr	r2, [pc, #196]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 800277e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fe08 	bl	8001398 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe fe04 	bl	8001398 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e091      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	3b01      	subs	r3, #1
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	071b      	lsls	r3, r3, #28
 80027d6:	491b      	ldr	r1, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a18      	ldr	r2, [pc, #96]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fdd6 	bl	8001398 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fdd2 	bl	8001398 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e05f      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x47c>
 800280e:	e057      	b.n	80028c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800281a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe fdbc 	bl	8001398 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fdb8 	bl	8001398 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e045      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_RCC_OscConfig+0x4d0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x4b0>
 8002842:	e03d      	b.n	80028c0 <HAL_RCC_OscConfig+0x54c>
 8002844:	40023800 	.word	0x40023800
 8002848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800284c:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_RCC_OscConfig+0x558>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d030      	beq.n	80028bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d129      	bne.n	80028bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d122      	bne.n	80028bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002882:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002884:	4293      	cmp	r3, r2
 8002886:	d119      	bne.n	80028bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d10f      	bne.n	80028bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0d0      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d910      	bls.n	8002918 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 020f 	bic.w	r2, r3, #15
 80028fe:	4965      	ldr	r1, [pc, #404]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800293a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 800294e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002952:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d040      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d115      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e073      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06b      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4936      	ldr	r1, [pc, #216]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c4:	f7fe fce8 	bl	8001398 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fe fce4 	bl	8001398 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e053      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d210      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 020f 	bic.w	r2, r3, #15
 8002a0a:	4922      	ldr	r1, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f821 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	490a      	ldr	r1, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x1cc>)
 8002a74:	5ccb      	ldrb	r3, [r1, r3]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1d0>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1d4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fc44 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080058b4 	.word	0x080058b4
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aac:	b094      	sub	sp, #80	; 0x50
 8002aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab8:	2300      	movs	r3, #0
 8002aba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac0:	4b79      	ldr	r3, [pc, #484]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d00d      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	f200 80e1 	bhi.w	8002c94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x34>
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ada:	e0db      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002adc:	4b73      	ldr	r3, [pc, #460]	; (8002cac <HAL_RCC_GetSysClockFreq+0x204>)
 8002ade:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ae0:	e0db      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae2:	4b73      	ldr	r3, [pc, #460]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ae6:	e0d8      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002af2:	4b6d      	ldr	r3, [pc, #436]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d063      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b6a      	ldr	r3, [pc, #424]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	2200      	movs	r2, #0
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
 8002b12:	2300      	movs	r3, #0
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
 8002b16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	462b      	mov	r3, r5
 8002b1e:	f04f 0000 	mov.w	r0, #0
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	0159      	lsls	r1, r3, #5
 8002b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2c:	0150      	lsls	r0, r2, #5
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4621      	mov	r1, r4
 8002b34:	1a51      	subs	r1, r2, r1
 8002b36:	6139      	str	r1, [r7, #16]
 8002b38:	4629      	mov	r1, r5
 8002b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b4c:	4659      	mov	r1, fp
 8002b4e:	018b      	lsls	r3, r1, #6
 8002b50:	4651      	mov	r1, sl
 8002b52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b56:	4651      	mov	r1, sl
 8002b58:	018a      	lsls	r2, r1, #6
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b60:	4659      	mov	r1, fp
 8002b62:	eb63 0901 	sbc.w	r9, r3, r1
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b7a:	4690      	mov	r8, r2
 8002b7c:	4699      	mov	r9, r3
 8002b7e:	4623      	mov	r3, r4
 8002b80:	eb18 0303 	adds.w	r3, r8, r3
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	462b      	mov	r3, r5
 8002b88:	eb49 0303 	adc.w	r3, r9, r3
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	024b      	lsls	r3, r1, #9
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	024a      	lsls	r2, r1, #9
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bae:	2200      	movs	r2, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bb8:	f7fd fb9a 	bl	80002f0 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc4:	e058      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc6:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	099b      	lsrs	r3, r3, #6
 8002bcc:	2200      	movs	r2, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
 8002bdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002be0:	4642      	mov	r2, r8
 8002be2:	464b      	mov	r3, r9
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	0159      	lsls	r1, r3, #5
 8002bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf2:	0150      	lsls	r0, r2, #5
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bfe:	4649      	mov	r1, r9
 8002c00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c18:	ebb2 040a 	subs.w	r4, r2, sl
 8002c1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	00eb      	lsls	r3, r5, #3
 8002c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2e:	00e2      	lsls	r2, r4, #3
 8002c30:	4614      	mov	r4, r2
 8002c32:	461d      	mov	r5, r3
 8002c34:	4643      	mov	r3, r8
 8002c36:	18e3      	adds	r3, r4, r3
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	eb45 0303 	adc.w	r3, r5, r3
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c4e:	4629      	mov	r1, r5
 8002c50:	028b      	lsls	r3, r1, #10
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c58:	4621      	mov	r1, r4
 8002c5a:	028a      	lsls	r2, r1, #10
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c62:	2200      	movs	r2, #0
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	61fa      	str	r2, [r7, #28]
 8002c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6c:	f7fd fb40 	bl	80002f0 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetSysClockFreq+0x204>)
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3750      	adds	r7, #80	; 0x50
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	080058c4 	.word	0x080058c4

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf8:	f7ff ffdc 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0b5b      	lsrs	r3, r3, #13
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	080058c4 	.word	0x080058c4

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d44:	4b69      	ldr	r3, [pc, #420]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a68      	ldr	r2, [pc, #416]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d4e:	6093      	str	r3, [r2, #8]
 8002d50:	4b66      	ldr	r3, [pc, #408]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	4964      	ldr	r1, [pc, #400]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d017      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	4959      	ldr	r1, [pc, #356]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d94:	d101      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002da2:	2301      	movs	r3, #1
 8002da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d017      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002db2:	4b4e      	ldr	r3, [pc, #312]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	494a      	ldr	r1, [pc, #296]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002dde:	2301      	movs	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 808b 	beq.w	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	4a39      	ldr	r2, [pc, #228]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0c:	4b37      	ldr	r3, [pc, #220]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e18:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a34      	ldr	r2, [pc, #208]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7fe fab8 	bl	8001398 <HAL_GetTick>
 8002e28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2c:	f7fe fab4 	bl	8001398 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e38f      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e4a:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d035      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d02e      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e68:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d114      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fa7c 	bl	8001398 <HAL_GetTick>
 8002ea0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fa78 	bl	8001398 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e351      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0ee      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed2:	d111      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	4901      	ldr	r1, [pc, #4]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
 8002eea:	e00b      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	0ffffcff 	.word	0x0ffffcff
 8002ef8:	4bac      	ldr	r3, [pc, #688]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4aab      	ldr	r2, [pc, #684]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f02:	6093      	str	r3, [r2, #8]
 8002f04:	4ba9      	ldr	r3, [pc, #676]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	49a6      	ldr	r1, [pc, #664]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d010      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f22:	4ba2      	ldr	r3, [pc, #648]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f28:	4aa0      	ldr	r2, [pc, #640]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f32:	4b9e      	ldr	r3, [pc, #632]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	499b      	ldr	r1, [pc, #620]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f50:	4b96      	ldr	r3, [pc, #600]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5e:	4993      	ldr	r1, [pc, #588]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f72:	4b8e      	ldr	r3, [pc, #568]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f80:	498a      	ldr	r1, [pc, #552]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f94:	4b85      	ldr	r3, [pc, #532]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa2:	4982      	ldr	r1, [pc, #520]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fb6:	4b7d      	ldr	r3, [pc, #500]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4979      	ldr	r1, [pc, #484]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fd8:	4b74      	ldr	r3, [pc, #464]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f023 0203 	bic.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	4971      	ldr	r1, [pc, #452]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ffa:	4b6c      	ldr	r3, [pc, #432]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f023 020c 	bic.w	r2, r3, #12
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003008:	4968      	ldr	r1, [pc, #416]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800301c:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	4960      	ldr	r1, [pc, #384]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800303e:	4b5b      	ldr	r3, [pc, #364]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304c:	4957      	ldr	r1, [pc, #348]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003060:	4b52      	ldr	r3, [pc, #328]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	494f      	ldr	r1, [pc, #316]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003082:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	4946      	ldr	r1, [pc, #280]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030a4:	4b41      	ldr	r3, [pc, #260]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b2:	493e      	ldr	r1, [pc, #248]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030c6:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	4935      	ldr	r1, [pc, #212]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030e8:	4b30      	ldr	r3, [pc, #192]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f6:	492d      	ldr	r1, [pc, #180]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d011      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800310a:	4b28      	ldr	r3, [pc, #160]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003110:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003118:	4924      	ldr	r1, [pc, #144]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003128:	d101      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800312a:	2301      	movs	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800313a:	2301      	movs	r3, #1
 800313c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003158:	4914      	ldr	r1, [pc, #80]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317c:	490b      	ldr	r1, [pc, #44]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00f      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a0:	4902      	ldr	r1, [pc, #8]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031a8:	e002      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031bc:	4b8a      	ldr	r3, [pc, #552]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	4986      	ldr	r1, [pc, #536]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031e0:	4b81      	ldr	r3, [pc, #516]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f0:	497d      	ldr	r1, [pc, #500]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d006      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80d6 	beq.w	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800320c:	4b76      	ldr	r3, [pc, #472]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a75      	ldr	r2, [pc, #468]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003218:	f7fe f8be 	bl	8001398 <HAL_GetTick>
 800321c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003220:	f7fe f8ba 	bl	8001398 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e195      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003232:	4b6d      	ldr	r3, [pc, #436]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d021      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	2b00      	cmp	r3, #0
 8003250:	d11d      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003252:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003260:	4b61      	ldr	r3, [pc, #388]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003266:	0e1b      	lsrs	r3, r3, #24
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	019a      	lsls	r2, r3, #6
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	431a      	orrs	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	4958      	ldr	r1, [pc, #352]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d02e      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b8:	d129      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032ba:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032c8:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ce:	0f1b      	lsrs	r3, r3, #28
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	019a      	lsls	r2, r3, #6
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	041b      	lsls	r3, r3, #16
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	071b      	lsls	r3, r3, #28
 80032ee:	493e      	ldr	r1, [pc, #248]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032f6:	4b3c      	ldr	r3, [pc, #240]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032fc:	f023 021f 	bic.w	r2, r3, #31
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	3b01      	subs	r3, #1
 8003306:	4938      	ldr	r1, [pc, #224]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01d      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800331a:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003320:	0e1b      	lsrs	r3, r3, #24
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003328:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332e:	0f1b      	lsrs	r3, r3, #28
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	019a      	lsls	r2, r3, #6
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	431a      	orrs	r2, r3
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	061b      	lsls	r3, r3, #24
 8003348:	431a      	orrs	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	071b      	lsls	r3, r3, #28
 800334e:	4926      	ldr	r1, [pc, #152]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d011      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	019a      	lsls	r2, r3, #6
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	071b      	lsls	r3, r3, #28
 800337e:	491a      	ldr	r1, [pc, #104]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003392:	f7fe f801 	bl	8001398 <HAL_GetTick>
 8003396:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800339a:	f7fd fffd 	bl	8001398 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b64      	cmp	r3, #100	; 0x64
 80033a6:	d901      	bls.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e0d8      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	f040 80ce 	bne.w	800355c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033c0:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fd ffe4 	bl	8001398 <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033d2:	e00b      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033d4:	f7fd ffe0 	bl	8001398 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d904      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0bb      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033ec:	4b5e      	ldr	r3, [pc, #376]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f8:	d0ec      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003416:	2b00      	cmp	r3, #0
 8003418:	d02e      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d12a      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003430:	4b4d      	ldr	r3, [pc, #308]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	0f1b      	lsrs	r3, r3, #28
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	019a      	lsls	r2, r3, #6
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	061b      	lsls	r3, r3, #24
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	071b      	lsls	r3, r3, #28
 8003456:	4944      	ldr	r1, [pc, #272]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800345e:	4b42      	ldr	r3, [pc, #264]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003464:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	493d      	ldr	r1, [pc, #244]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d022      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800348c:	d11d      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	0e1b      	lsrs	r3, r3, #24
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800349c:	4b32      	ldr	r3, [pc, #200]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	0f1b      	lsrs	r3, r3, #28
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	019a      	lsls	r2, r3, #6
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	431a      	orrs	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	061b      	lsls	r3, r3, #24
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	071b      	lsls	r3, r3, #28
 80034c2:	4929      	ldr	r1, [pc, #164]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d028      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	0e1b      	lsrs	r3, r3, #24
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034e4:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	019a      	lsls	r2, r3, #6
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	431a      	orrs	r2, r3
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	061b      	lsls	r3, r3, #24
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	071b      	lsls	r3, r3, #28
 800350a:	4917      	ldr	r1, [pc, #92]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003512:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	4911      	ldr	r1, [pc, #68]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003534:	f7fd ff30 	bl	8001398 <HAL_GetTick>
 8003538:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800353c:	f7fd ff2c 	bl	8001398 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e007      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800355a:	d1ef      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800

0800356c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e049      	b.n	8003612 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fc7c 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f000 faca 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d001      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e054      	b.n	80036de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	; (80036ec <HAL_TIM_Base_Start_IT+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d022      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365e:	d01d      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d018      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00e      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_TIM_Base_Start_IT+0xe0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_TIM_Base_Start_IT+0xe4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_TIM_Base_Start_IT+0xe8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d115      	bne.n	80036c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_TIM_Base_Start_IT+0xec>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d015      	beq.n	80036da <HAL_TIM_Base_Start_IT+0xbe>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d011      	beq.n	80036da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c6:	e008      	b.n	80036da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e000      	b.n	80036dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40010400 	.word	0x40010400
 8003700:	40014000 	.word	0x40014000
 8003704:	40001800 	.word	0x40001800
 8003708:	00010007 	.word	0x00010007

0800370c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0202 	mvn.w	r2, #2
 8003738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9da 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f9cc 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f9dd 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b04      	cmp	r3, #4
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0204 	mvn.w	r2, #4
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9b0 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9a2 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f9b3 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0208 	mvn.w	r2, #8
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2204      	movs	r2, #4
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f986 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f978 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f989 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b10      	cmp	r3, #16
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0210 	mvn.w	r2, #16
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2208      	movs	r2, #8
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f95c 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f94e 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f95f 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d10e      	bne.n	8003890 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d107      	bne.n	8003890 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0201 	mvn.w	r2, #1
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f928 	bl	8003ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fb16 	bl	8003ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d10e      	bne.n	80038ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b80      	cmp	r3, #128	; 0x80
 80038d8:	d107      	bne.n	80038ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fb09 	bl	8003efc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d10e      	bne.n	8003916 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d107      	bne.n	8003916 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800390e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f90d 	bl	8003b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b20      	cmp	r3, #32
 8003922:	d10e      	bne.n	8003942 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b20      	cmp	r3, #32
 8003930:	d107      	bne.n	8003942 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f06f 0220 	mvn.w	r2, #32
 800393a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fac9 	bl	8003ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_TIM_ConfigClockSource+0x1c>
 8003964:	2302      	movs	r3, #2
 8003966:	e0b4      	b.n	8003ad2 <HAL_TIM_ConfigClockSource+0x186>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	4b56      	ldr	r3, [pc, #344]	; (8003adc <HAL_TIM_ConfigClockSource+0x190>)
 8003984:	4013      	ands	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a0:	d03e      	beq.n	8003a20 <HAL_TIM_ConfigClockSource+0xd4>
 80039a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a6:	f200 8087 	bhi.w	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	f000 8086 	beq.w	8003abe <HAL_TIM_ConfigClockSource+0x172>
 80039b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b6:	d87f      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039b8:	2b70      	cmp	r3, #112	; 0x70
 80039ba:	d01a      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0xa6>
 80039bc:	2b70      	cmp	r3, #112	; 0x70
 80039be:	d87b      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039c0:	2b60      	cmp	r3, #96	; 0x60
 80039c2:	d050      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x11a>
 80039c4:	2b60      	cmp	r3, #96	; 0x60
 80039c6:	d877      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039c8:	2b50      	cmp	r3, #80	; 0x50
 80039ca:	d03c      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0xfa>
 80039cc:	2b50      	cmp	r3, #80	; 0x50
 80039ce:	d873      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d058      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x13a>
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d86f      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b30      	cmp	r3, #48	; 0x30
 80039da:	d064      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80039dc:	2b30      	cmp	r3, #48	; 0x30
 80039de:	d86b      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d060      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d867      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d05c      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d05a      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80039f0:	e062      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6899      	ldr	r1, [r3, #8]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f000 f9b9 	bl	8003d78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	609a      	str	r2, [r3, #8]
      break;
 8003a1e:	e04f      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f000 f9a2 	bl	8003d78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a42:	609a      	str	r2, [r3, #8]
      break;
 8003a44:	e03c      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6859      	ldr	r1, [r3, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f000 f916 	bl	8003c84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2150      	movs	r1, #80	; 0x50
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f96f 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 8003a64:	e02c      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f000 f935 	bl	8003ce2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2160      	movs	r1, #96	; 0x60
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f95f 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 8003a84:	e01c      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f000 f8f6 	bl	8003c84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2140      	movs	r1, #64	; 0x40
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f94f 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 8003aa4:	e00c      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f000 f946 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 8003ab6:	e003      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      break;
 8003abc:	e000      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003abe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	fffeff88 	.word	0xfffeff88

08003ae0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a40      	ldr	r2, [pc, #256]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d00f      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3a      	ldr	r2, [pc, #232]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d108      	bne.n	8003b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d027      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d023      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d017      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <TIM_Base_SetConfig+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <TIM_Base_SetConfig+0x12c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <TIM_Base_SetConfig+0x130>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <TIM_Base_SetConfig+0x134>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <TIM_Base_SetConfig+0x138>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <TIM_Base_SetConfig+0x13c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0xf8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d103      	bne.n	8003c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	615a      	str	r2, [r3, #20]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40010400 	.word	0x40010400
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800
 8003c78:	40001800 	.word	0x40001800
 8003c7c:	40001c00 	.word	0x40001c00
 8003c80:	40002000 	.word	0x40002000

08003c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0201 	bic.w	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f023 030a 	bic.w	r3, r3, #10
 8003cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b087      	sub	sp, #28
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f023 0210 	bic.w	r2, r3, #16
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	031b      	lsls	r3, r3, #12
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	621a      	str	r2, [r3, #32]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f043 0307 	orr.w	r3, r3, #7
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	609a      	str	r2, [r3, #8]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	021a      	lsls	r2, r3, #8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	609a      	str	r2, [r3, #8]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e06d      	b.n	8003eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a30      	ldr	r2, [pc, #192]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2f      	ldr	r2, [pc, #188]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d108      	bne.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a20      	ldr	r2, [pc, #128]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d022      	beq.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e42:	d01d      	beq.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1a      	ldr	r2, [pc, #104]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10c      	bne.n	8003e9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40010000 	.word	0x40010000
 8003ebc:	40010400 	.word	0x40010400
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800
 8003ec8:	40000c00 	.word	0x40000c00
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	40001800 	.word	0x40001800

08003ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e040      	b.n	8003fa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fc ffee 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f8b0 	bl	80040b4 <UART_SetConfig>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e022      	b.n	8003fa4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fb08 	bl	800457c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fb8f 	bl	80046c0 <UART_CheckIdleState>
 8003fa2:	4603      	mov	r3, r0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d171      	bne.n	80040a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_UART_Transmit+0x24>
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e06a      	b.n	80040aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2221      	movs	r2, #33	; 0x21
 8003fe0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe2:	f7fd f9d9 	bl	8001398 <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d108      	bne.n	8004014 <HAL_UART_Transmit+0x68>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e003      	b.n	800401c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800401c:	e02c      	b.n	8004078 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	2180      	movs	r1, #128	; 0x80
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fb96 	bl	800475a <UART_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e038      	b.n	80040aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10b      	bne.n	8004056 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800404c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	3302      	adds	r3, #2
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	e007      	b.n	8004066 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	3301      	adds	r3, #1
 8004064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1cc      	bne.n	800401e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2200      	movs	r2, #0
 800408c:	2140      	movs	r1, #64	; 0x40
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fb63 	bl	800475a <UART_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e005      	b.n	80040aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4ba6      	ldr	r3, [pc, #664]	; (8004378 <UART_SetConfig+0x2c4>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	6979      	ldr	r1, [r7, #20]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a94      	ldr	r2, [pc, #592]	; (800437c <UART_SetConfig+0x2c8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d120      	bne.n	8004172 <UART_SetConfig+0xbe>
 8004130:	4b93      	ldr	r3, [pc, #588]	; (8004380 <UART_SetConfig+0x2cc>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b03      	cmp	r3, #3
 800413c:	d816      	bhi.n	800416c <UART_SetConfig+0xb8>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <UART_SetConfig+0x90>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004155 	.word	0x08004155
 8004148:	08004161 	.word	0x08004161
 800414c:	0800415b 	.word	0x0800415b
 8004150:	08004167 	.word	0x08004167
 8004154:	2301      	movs	r3, #1
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e150      	b.n	80043fc <UART_SetConfig+0x348>
 800415a:	2302      	movs	r3, #2
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e14d      	b.n	80043fc <UART_SetConfig+0x348>
 8004160:	2304      	movs	r3, #4
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e14a      	b.n	80043fc <UART_SetConfig+0x348>
 8004166:	2308      	movs	r3, #8
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e147      	b.n	80043fc <UART_SetConfig+0x348>
 800416c:	2310      	movs	r3, #16
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e144      	b.n	80043fc <UART_SetConfig+0x348>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a83      	ldr	r2, [pc, #524]	; (8004384 <UART_SetConfig+0x2d0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d132      	bne.n	80041e2 <UART_SetConfig+0x12e>
 800417c:	4b80      	ldr	r3, [pc, #512]	; (8004380 <UART_SetConfig+0x2cc>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d828      	bhi.n	80041dc <UART_SetConfig+0x128>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <UART_SetConfig+0xdc>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041c5 	.word	0x080041c5
 8004194:	080041dd 	.word	0x080041dd
 8004198:	080041dd 	.word	0x080041dd
 800419c:	080041dd 	.word	0x080041dd
 80041a0:	080041d1 	.word	0x080041d1
 80041a4:	080041dd 	.word	0x080041dd
 80041a8:	080041dd 	.word	0x080041dd
 80041ac:	080041dd 	.word	0x080041dd
 80041b0:	080041cb 	.word	0x080041cb
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041dd 	.word	0x080041dd
 80041bc:	080041dd 	.word	0x080041dd
 80041c0:	080041d7 	.word	0x080041d7
 80041c4:	2300      	movs	r3, #0
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e118      	b.n	80043fc <UART_SetConfig+0x348>
 80041ca:	2302      	movs	r3, #2
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e115      	b.n	80043fc <UART_SetConfig+0x348>
 80041d0:	2304      	movs	r3, #4
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e112      	b.n	80043fc <UART_SetConfig+0x348>
 80041d6:	2308      	movs	r3, #8
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e10f      	b.n	80043fc <UART_SetConfig+0x348>
 80041dc:	2310      	movs	r3, #16
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e10c      	b.n	80043fc <UART_SetConfig+0x348>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a68      	ldr	r2, [pc, #416]	; (8004388 <UART_SetConfig+0x2d4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d120      	bne.n	800422e <UART_SetConfig+0x17a>
 80041ec:	4b64      	ldr	r3, [pc, #400]	; (8004380 <UART_SetConfig+0x2cc>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041f6:	2b30      	cmp	r3, #48	; 0x30
 80041f8:	d013      	beq.n	8004222 <UART_SetConfig+0x16e>
 80041fa:	2b30      	cmp	r3, #48	; 0x30
 80041fc:	d814      	bhi.n	8004228 <UART_SetConfig+0x174>
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d009      	beq.n	8004216 <UART_SetConfig+0x162>
 8004202:	2b20      	cmp	r3, #32
 8004204:	d810      	bhi.n	8004228 <UART_SetConfig+0x174>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <UART_SetConfig+0x15c>
 800420a:	2b10      	cmp	r3, #16
 800420c:	d006      	beq.n	800421c <UART_SetConfig+0x168>
 800420e:	e00b      	b.n	8004228 <UART_SetConfig+0x174>
 8004210:	2300      	movs	r3, #0
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e0f2      	b.n	80043fc <UART_SetConfig+0x348>
 8004216:	2302      	movs	r3, #2
 8004218:	77fb      	strb	r3, [r7, #31]
 800421a:	e0ef      	b.n	80043fc <UART_SetConfig+0x348>
 800421c:	2304      	movs	r3, #4
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e0ec      	b.n	80043fc <UART_SetConfig+0x348>
 8004222:	2308      	movs	r3, #8
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	e0e9      	b.n	80043fc <UART_SetConfig+0x348>
 8004228:	2310      	movs	r3, #16
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	e0e6      	b.n	80043fc <UART_SetConfig+0x348>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a56      	ldr	r2, [pc, #344]	; (800438c <UART_SetConfig+0x2d8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d120      	bne.n	800427a <UART_SetConfig+0x1c6>
 8004238:	4b51      	ldr	r3, [pc, #324]	; (8004380 <UART_SetConfig+0x2cc>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004242:	2bc0      	cmp	r3, #192	; 0xc0
 8004244:	d013      	beq.n	800426e <UART_SetConfig+0x1ba>
 8004246:	2bc0      	cmp	r3, #192	; 0xc0
 8004248:	d814      	bhi.n	8004274 <UART_SetConfig+0x1c0>
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d009      	beq.n	8004262 <UART_SetConfig+0x1ae>
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d810      	bhi.n	8004274 <UART_SetConfig+0x1c0>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <UART_SetConfig+0x1a8>
 8004256:	2b40      	cmp	r3, #64	; 0x40
 8004258:	d006      	beq.n	8004268 <UART_SetConfig+0x1b4>
 800425a:	e00b      	b.n	8004274 <UART_SetConfig+0x1c0>
 800425c:	2300      	movs	r3, #0
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e0cc      	b.n	80043fc <UART_SetConfig+0x348>
 8004262:	2302      	movs	r3, #2
 8004264:	77fb      	strb	r3, [r7, #31]
 8004266:	e0c9      	b.n	80043fc <UART_SetConfig+0x348>
 8004268:	2304      	movs	r3, #4
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e0c6      	b.n	80043fc <UART_SetConfig+0x348>
 800426e:	2308      	movs	r3, #8
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e0c3      	b.n	80043fc <UART_SetConfig+0x348>
 8004274:	2310      	movs	r3, #16
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e0c0      	b.n	80043fc <UART_SetConfig+0x348>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a44      	ldr	r2, [pc, #272]	; (8004390 <UART_SetConfig+0x2dc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d125      	bne.n	80042d0 <UART_SetConfig+0x21c>
 8004284:	4b3e      	ldr	r3, [pc, #248]	; (8004380 <UART_SetConfig+0x2cc>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004292:	d017      	beq.n	80042c4 <UART_SetConfig+0x210>
 8004294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004298:	d817      	bhi.n	80042ca <UART_SetConfig+0x216>
 800429a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429e:	d00b      	beq.n	80042b8 <UART_SetConfig+0x204>
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d811      	bhi.n	80042ca <UART_SetConfig+0x216>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <UART_SetConfig+0x1fe>
 80042aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ae:	d006      	beq.n	80042be <UART_SetConfig+0x20a>
 80042b0:	e00b      	b.n	80042ca <UART_SetConfig+0x216>
 80042b2:	2300      	movs	r3, #0
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e0a1      	b.n	80043fc <UART_SetConfig+0x348>
 80042b8:	2302      	movs	r3, #2
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e09e      	b.n	80043fc <UART_SetConfig+0x348>
 80042be:	2304      	movs	r3, #4
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e09b      	b.n	80043fc <UART_SetConfig+0x348>
 80042c4:	2308      	movs	r3, #8
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e098      	b.n	80043fc <UART_SetConfig+0x348>
 80042ca:	2310      	movs	r3, #16
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e095      	b.n	80043fc <UART_SetConfig+0x348>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <UART_SetConfig+0x2e0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d125      	bne.n	8004326 <UART_SetConfig+0x272>
 80042da:	4b29      	ldr	r3, [pc, #164]	; (8004380 <UART_SetConfig+0x2cc>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042e8:	d017      	beq.n	800431a <UART_SetConfig+0x266>
 80042ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ee:	d817      	bhi.n	8004320 <UART_SetConfig+0x26c>
 80042f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f4:	d00b      	beq.n	800430e <UART_SetConfig+0x25a>
 80042f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fa:	d811      	bhi.n	8004320 <UART_SetConfig+0x26c>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <UART_SetConfig+0x254>
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004304:	d006      	beq.n	8004314 <UART_SetConfig+0x260>
 8004306:	e00b      	b.n	8004320 <UART_SetConfig+0x26c>
 8004308:	2301      	movs	r3, #1
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e076      	b.n	80043fc <UART_SetConfig+0x348>
 800430e:	2302      	movs	r3, #2
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e073      	b.n	80043fc <UART_SetConfig+0x348>
 8004314:	2304      	movs	r3, #4
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e070      	b.n	80043fc <UART_SetConfig+0x348>
 800431a:	2308      	movs	r3, #8
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e06d      	b.n	80043fc <UART_SetConfig+0x348>
 8004320:	2310      	movs	r3, #16
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e06a      	b.n	80043fc <UART_SetConfig+0x348>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <UART_SetConfig+0x2e4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d138      	bne.n	80043a2 <UART_SetConfig+0x2ee>
 8004330:	4b13      	ldr	r3, [pc, #76]	; (8004380 <UART_SetConfig+0x2cc>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800433a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800433e:	d017      	beq.n	8004370 <UART_SetConfig+0x2bc>
 8004340:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004344:	d82a      	bhi.n	800439c <UART_SetConfig+0x2e8>
 8004346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434a:	d00b      	beq.n	8004364 <UART_SetConfig+0x2b0>
 800434c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004350:	d824      	bhi.n	800439c <UART_SetConfig+0x2e8>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <UART_SetConfig+0x2aa>
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	d006      	beq.n	800436a <UART_SetConfig+0x2b6>
 800435c:	e01e      	b.n	800439c <UART_SetConfig+0x2e8>
 800435e:	2300      	movs	r3, #0
 8004360:	77fb      	strb	r3, [r7, #31]
 8004362:	e04b      	b.n	80043fc <UART_SetConfig+0x348>
 8004364:	2302      	movs	r3, #2
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e048      	b.n	80043fc <UART_SetConfig+0x348>
 800436a:	2304      	movs	r3, #4
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e045      	b.n	80043fc <UART_SetConfig+0x348>
 8004370:	2308      	movs	r3, #8
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e042      	b.n	80043fc <UART_SetConfig+0x348>
 8004376:	bf00      	nop
 8004378:	efff69f3 	.word	0xefff69f3
 800437c:	40011000 	.word	0x40011000
 8004380:	40023800 	.word	0x40023800
 8004384:	40004400 	.word	0x40004400
 8004388:	40004800 	.word	0x40004800
 800438c:	40004c00 	.word	0x40004c00
 8004390:	40005000 	.word	0x40005000
 8004394:	40011400 	.word	0x40011400
 8004398:	40007800 	.word	0x40007800
 800439c:	2310      	movs	r3, #16
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e02c      	b.n	80043fc <UART_SetConfig+0x348>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a72      	ldr	r2, [pc, #456]	; (8004570 <UART_SetConfig+0x4bc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d125      	bne.n	80043f8 <UART_SetConfig+0x344>
 80043ac:	4b71      	ldr	r3, [pc, #452]	; (8004574 <UART_SetConfig+0x4c0>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043ba:	d017      	beq.n	80043ec <UART_SetConfig+0x338>
 80043bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043c0:	d817      	bhi.n	80043f2 <UART_SetConfig+0x33e>
 80043c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c6:	d00b      	beq.n	80043e0 <UART_SetConfig+0x32c>
 80043c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043cc:	d811      	bhi.n	80043f2 <UART_SetConfig+0x33e>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <UART_SetConfig+0x326>
 80043d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d6:	d006      	beq.n	80043e6 <UART_SetConfig+0x332>
 80043d8:	e00b      	b.n	80043f2 <UART_SetConfig+0x33e>
 80043da:	2300      	movs	r3, #0
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e00d      	b.n	80043fc <UART_SetConfig+0x348>
 80043e0:	2302      	movs	r3, #2
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e00a      	b.n	80043fc <UART_SetConfig+0x348>
 80043e6:	2304      	movs	r3, #4
 80043e8:	77fb      	strb	r3, [r7, #31]
 80043ea:	e007      	b.n	80043fc <UART_SetConfig+0x348>
 80043ec:	2308      	movs	r3, #8
 80043ee:	77fb      	strb	r3, [r7, #31]
 80043f0:	e004      	b.n	80043fc <UART_SetConfig+0x348>
 80043f2:	2310      	movs	r3, #16
 80043f4:	77fb      	strb	r3, [r7, #31]
 80043f6:	e001      	b.n	80043fc <UART_SetConfig+0x348>
 80043f8:	2310      	movs	r3, #16
 80043fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004404:	d15b      	bne.n	80044be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004406:	7ffb      	ldrb	r3, [r7, #31]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d828      	bhi.n	800445e <UART_SetConfig+0x3aa>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0x360>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004439 	.word	0x08004439
 8004418:	08004441 	.word	0x08004441
 800441c:	08004449 	.word	0x08004449
 8004420:	0800445f 	.word	0x0800445f
 8004424:	0800444f 	.word	0x0800444f
 8004428:	0800445f 	.word	0x0800445f
 800442c:	0800445f 	.word	0x0800445f
 8004430:	0800445f 	.word	0x0800445f
 8004434:	08004457 	.word	0x08004457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004438:	f7fe fc48 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 800443c:	61b8      	str	r0, [r7, #24]
        break;
 800443e:	e013      	b.n	8004468 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004440:	f7fe fc58 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8004444:	61b8      	str	r0, [r7, #24]
        break;
 8004446:	e00f      	b.n	8004468 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004448:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <UART_SetConfig+0x4c4>)
 800444a:	61bb      	str	r3, [r7, #24]
        break;
 800444c:	e00c      	b.n	8004468 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444e:	f7fe fb2b 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8004452:	61b8      	str	r0, [r7, #24]
        break;
 8004454:	e008      	b.n	8004468 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445a:	61bb      	str	r3, [r7, #24]
        break;
 800445c:	e004      	b.n	8004468 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	77bb      	strb	r3, [r7, #30]
        break;
 8004466:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d074      	beq.n	8004558 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	005a      	lsls	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	d916      	bls.n	80044b8 <UART_SetConfig+0x404>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d212      	bcs.n	80044b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f023 030f 	bic.w	r3, r3, #15
 800449a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	89fb      	ldrh	r3, [r7, #14]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	89fa      	ldrh	r2, [r7, #14]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	e04f      	b.n	8004558 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	77bb      	strb	r3, [r7, #30]
 80044bc:	e04c      	b.n	8004558 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044be:	7ffb      	ldrb	r3, [r7, #31]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d828      	bhi.n	8004516 <UART_SetConfig+0x462>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0x418>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	08004501 	.word	0x08004501
 80044d8:	08004517 	.word	0x08004517
 80044dc:	08004507 	.word	0x08004507
 80044e0:	08004517 	.word	0x08004517
 80044e4:	08004517 	.word	0x08004517
 80044e8:	08004517 	.word	0x08004517
 80044ec:	0800450f 	.word	0x0800450f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fe fbec 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80044f4:	61b8      	str	r0, [r7, #24]
        break;
 80044f6:	e013      	b.n	8004520 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f8:	f7fe fbfc 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 80044fc:	61b8      	str	r0, [r7, #24]
        break;
 80044fe:	e00f      	b.n	8004520 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004500:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <UART_SetConfig+0x4c4>)
 8004502:	61bb      	str	r3, [r7, #24]
        break;
 8004504:	e00c      	b.n	8004520 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004506:	f7fe facf 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 800450a:	61b8      	str	r0, [r7, #24]
        break;
 800450c:	e008      	b.n	8004520 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004512:	61bb      	str	r3, [r7, #24]
        break;
 8004514:	e004      	b.n	8004520 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	77bb      	strb	r3, [r7, #30]
        break;
 800451e:	bf00      	nop
    }

    if (pclk != 0U)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d018      	beq.n	8004558 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	085a      	lsrs	r2, r3, #1
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	441a      	add	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b0f      	cmp	r3, #15
 800453e:	d909      	bls.n	8004554 <UART_SetConfig+0x4a0>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004546:	d205      	bcs.n	8004554 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	e001      	b.n	8004558 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004564:	7fbb      	ldrb	r3, [r7, #30]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40007c00 	.word	0x40007c00
 8004574:	40023800 	.word	0x40023800
 8004578:	00f42400 	.word	0x00f42400

0800457c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01a      	beq.n	8004692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467a:	d10a      	bne.n	8004692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]
  }
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046d0:	f7fc fe62 	bl	8001398 <HAL_GetTick>
 80046d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d10e      	bne.n	8004702 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f831 	bl	800475a <UART_WaitOnFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e027      	b.n	8004752 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d10e      	bne.n	800472e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f81b 	bl	800475a <UART_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e011      	b.n	8004752 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b09c      	sub	sp, #112	; 0x70
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476a:	e0a7      	b.n	80048bc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	f000 80a3 	beq.w	80048bc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fc fe0f 	bl	8001398 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <UART_WaitOnFlagUntilTimeout+0x32>
 8004786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004788:	2b00      	cmp	r3, #0
 800478a:	d13f      	bne.n	800480c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800479a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047a0:	667b      	str	r3, [r7, #100]	; 0x64
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e6      	bne.n	800478c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3308      	adds	r3, #8
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	663b      	str	r3, [r7, #96]	; 0x60
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047de:	64ba      	str	r2, [r7, #72]	; 0x48
 80047e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e5      	bne.n	80047be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e068      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d050      	beq.n	80048bc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004828:	d148      	bne.n	80048bc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004832:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004848:	66fb      	str	r3, [r7, #108]	; 0x6c
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
 8004854:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e6      	bne.n	8004834 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3308      	adds	r3, #8
 800486c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	613b      	str	r3, [r7, #16]
   return(result);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	66bb      	str	r3, [r7, #104]	; 0x68
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3308      	adds	r3, #8
 8004884:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004886:	623a      	str	r2, [r7, #32]
 8004888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	69f9      	ldr	r1, [r7, #28]
 800488c:	6a3a      	ldr	r2, [r7, #32]
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	61bb      	str	r3, [r7, #24]
   return(result);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e5      	bne.n	8004866 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e010      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69da      	ldr	r2, [r3, #28]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	f43f af48 	beq.w	800476c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3770      	adds	r7, #112	; 0x70
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048e8:	b084      	sub	sp, #16
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	f107 001c 	add.w	r0, r7, #28
 80048f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d120      	bne.n	8004942 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	4b20      	ldr	r3, [pc, #128]	; (8004994 <USB_CoreInit+0xac>)
 8004912:	4013      	ands	r3, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d105      	bne.n	8004936 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa96 	bl	8004e68 <USB_CoreReset>
 800493c:	4603      	mov	r3, r0
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	e010      	b.n	8004964 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa8a 	bl	8004e68 <USB_CoreReset>
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10b      	bne.n	8004982 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f043 0206 	orr.w	r2, r3, #6
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f043 0220 	orr.w	r2, r3, #32
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800498e:	b004      	add	sp, #16
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	ffbdffbf 	.word	0xffbdffbf

08004998 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f023 0201 	bic.w	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d115      	bne.n	8004a08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049e8:	2001      	movs	r0, #1
 80049ea:	f7fc fce1 	bl	80013b0 <HAL_Delay>
      ms++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3301      	adds	r3, #1
 80049f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fa29 	bl	8004e4c <USB_GetMode>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d01e      	beq.n	8004a3e <USB_SetCurrentMode+0x84>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b31      	cmp	r3, #49	; 0x31
 8004a04:	d9f0      	bls.n	80049e8 <USB_SetCurrentMode+0x2e>
 8004a06:	e01a      	b.n	8004a3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d115      	bne.n	8004a3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	f7fc fcc8 	bl	80013b0 <HAL_Delay>
      ms++;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3301      	adds	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fa10 	bl	8004e4c <USB_GetMode>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <USB_SetCurrentMode+0x84>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b31      	cmp	r3, #49	; 0x31
 8004a36:	d9f0      	bls.n	8004a1a <USB_SetCurrentMode+0x60>
 8004a38:	e001      	b.n	8004a3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e005      	b.n	8004a4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b32      	cmp	r3, #50	; 0x32
 8004a42:	d101      	bne.n	8004a48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a54:	b084      	sub	sp, #16
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a6e:	2300      	movs	r3, #0
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e009      	b.n	8004a88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	3340      	adds	r3, #64	; 0x40
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	3301      	adds	r3, #1
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b0e      	cmp	r3, #14
 8004a8c:	d9f2      	bls.n	8004a74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d11c      	bne.n	8004ace <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa2:	f043 0302 	orr.w	r3, r3, #2
 8004aa6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	e005      	b.n	8004ada <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aec:	4619      	mov	r1, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af4:	461a      	mov	r2, r3
 8004af6:	680b      	ldr	r3, [r1, #0]
 8004af8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10c      	bne.n	8004b1a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b06:	2100      	movs	r1, #0
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f965 	bl	8004dd8 <USB_SetDevSpeed>
 8004b0e:	e008      	b.n	8004b22 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b10:	2101      	movs	r1, #1
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f960 	bl	8004dd8 <USB_SetDevSpeed>
 8004b18:	e003      	b.n	8004b22 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b1a:	2103      	movs	r1, #3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f95b 	bl	8004dd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b22:	2110      	movs	r1, #16
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f8f3 	bl	8004d10 <USB_FlushTxFifo>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f91f 	bl	8004d78 <USB_FlushRxFifo>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	461a      	mov	r2, r3
 8004b58:	2300      	movs	r3, #0
 8004b5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b62:	461a      	mov	r2, r3
 8004b64:	2300      	movs	r3, #0
 8004b66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	e043      	b.n	8004bf6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b84:	d118      	bne.n	8004bb8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	e013      	b.n	8004bca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	e008      	b.n	8004bca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2300      	movs	r3, #0
 8004bda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	461a      	mov	r2, r3
 8004bea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d3b7      	bcc.n	8004b6e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	e043      	b.n	8004c8c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c1a:	d118      	bne.n	8004c4e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e013      	b.n	8004c60 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	461a      	mov	r2, r3
 8004c46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	e008      	b.n	8004c60 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d3b7      	bcc.n	8004c04 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d105      	bne.n	8004cc8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f043 0210 	orr.w	r2, r3, #16
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699a      	ldr	r2, [r3, #24]
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <USB_DevInit+0x2b4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f043 0208 	orr.w	r2, r3, #8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d105      	bne.n	8004cf8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <USB_DevInit+0x2b8>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d04:	b004      	add	sp, #16
 8004d06:	4770      	bx	lr
 8004d08:	803c3800 	.word	0x803c3800
 8004d0c:	40000004 	.word	0x40000004

08004d10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3301      	adds	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <USB_FlushTxFifo+0x64>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d901      	bls.n	8004d30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e01b      	b.n	8004d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	daf2      	bge.n	8004d1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	019b      	lsls	r3, r3, #6
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <USB_FlushTxFifo+0x64>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e006      	b.n	8004d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d0f0      	beq.n	8004d48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	00030d40 	.word	0x00030d40

08004d78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a11      	ldr	r2, [pc, #68]	; (8004dd4 <USB_FlushRxFifo+0x5c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e018      	b.n	8004dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	daf2      	bge.n	8004d84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2210      	movs	r2, #16
 8004da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3301      	adds	r3, #1
 8004dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <USB_FlushRxFifo+0x5c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e006      	b.n	8004dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d0f0      	beq.n	8004da8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	00030d40 	.word	0x00030d40

08004dd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e24:	f023 0303 	bic.w	r3, r3, #3
 8004e28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e38:	f043 0302 	orr.w	r3, r3, #2
 8004e3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0301 	and.w	r3, r3, #1
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <USB_CoreReset+0x64>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e01b      	b.n	8004ebe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	daf2      	bge.n	8004e74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f043 0201 	orr.w	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <USB_CoreReset+0x64>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d901      	bls.n	8004eb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e006      	b.n	8004ebe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d0f0      	beq.n	8004e9e <USB_CoreReset+0x36>

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	00030d40 	.word	0x00030d40

08004ed0 <__errno>:
 8004ed0:	4b01      	ldr	r3, [pc, #4]	; (8004ed8 <__errno+0x8>)
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	2000000c 	.word	0x2000000c

08004edc <__libc_init_array>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	4d0d      	ldr	r5, [pc, #52]	; (8004f14 <__libc_init_array+0x38>)
 8004ee0:	4c0d      	ldr	r4, [pc, #52]	; (8004f18 <__libc_init_array+0x3c>)
 8004ee2:	1b64      	subs	r4, r4, r5
 8004ee4:	10a4      	asrs	r4, r4, #2
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	42a6      	cmp	r6, r4
 8004eea:	d109      	bne.n	8004f00 <__libc_init_array+0x24>
 8004eec:	4d0b      	ldr	r5, [pc, #44]	; (8004f1c <__libc_init_array+0x40>)
 8004eee:	4c0c      	ldr	r4, [pc, #48]	; (8004f20 <__libc_init_array+0x44>)
 8004ef0:	f000 fc8e 	bl	8005810 <_init>
 8004ef4:	1b64      	subs	r4, r4, r5
 8004ef6:	10a4      	asrs	r4, r4, #2
 8004ef8:	2600      	movs	r6, #0
 8004efa:	42a6      	cmp	r6, r4
 8004efc:	d105      	bne.n	8004f0a <__libc_init_array+0x2e>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f04:	4798      	blx	r3
 8004f06:	3601      	adds	r6, #1
 8004f08:	e7ee      	b.n	8004ee8 <__libc_init_array+0xc>
 8004f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0e:	4798      	blx	r3
 8004f10:	3601      	adds	r6, #1
 8004f12:	e7f2      	b.n	8004efa <__libc_init_array+0x1e>
 8004f14:	08005908 	.word	0x08005908
 8004f18:	08005908 	.word	0x08005908
 8004f1c:	08005908 	.word	0x08005908
 8004f20:	0800590c 	.word	0x0800590c

08004f24 <memset>:
 8004f24:	4402      	add	r2, r0
 8004f26:	4603      	mov	r3, r0
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d100      	bne.n	8004f2e <memset+0xa>
 8004f2c:	4770      	bx	lr
 8004f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f32:	e7f9      	b.n	8004f28 <memset+0x4>

08004f34 <siprintf>:
 8004f34:	b40e      	push	{r1, r2, r3}
 8004f36:	b500      	push	{lr}
 8004f38:	b09c      	sub	sp, #112	; 0x70
 8004f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f3c:	9002      	str	r0, [sp, #8]
 8004f3e:	9006      	str	r0, [sp, #24]
 8004f40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f44:	4809      	ldr	r0, [pc, #36]	; (8004f6c <siprintf+0x38>)
 8004f46:	9107      	str	r1, [sp, #28]
 8004f48:	9104      	str	r1, [sp, #16]
 8004f4a:	4909      	ldr	r1, [pc, #36]	; (8004f70 <siprintf+0x3c>)
 8004f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f50:	9105      	str	r1, [sp, #20]
 8004f52:	6800      	ldr	r0, [r0, #0]
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	a902      	add	r1, sp, #8
 8004f58:	f000 f868 	bl	800502c <_svfiprintf_r>
 8004f5c:	9b02      	ldr	r3, [sp, #8]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	b01c      	add	sp, #112	; 0x70
 8004f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f68:	b003      	add	sp, #12
 8004f6a:	4770      	bx	lr
 8004f6c:	2000000c 	.word	0x2000000c
 8004f70:	ffff0208 	.word	0xffff0208

08004f74 <__ssputs_r>:
 8004f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f78:	688e      	ldr	r6, [r1, #8]
 8004f7a:	429e      	cmp	r6, r3
 8004f7c:	4682      	mov	sl, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	4690      	mov	r8, r2
 8004f82:	461f      	mov	r7, r3
 8004f84:	d838      	bhi.n	8004ff8 <__ssputs_r+0x84>
 8004f86:	898a      	ldrh	r2, [r1, #12]
 8004f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f8c:	d032      	beq.n	8004ff4 <__ssputs_r+0x80>
 8004f8e:	6825      	ldr	r5, [r4, #0]
 8004f90:	6909      	ldr	r1, [r1, #16]
 8004f92:	eba5 0901 	sub.w	r9, r5, r1
 8004f96:	6965      	ldr	r5, [r4, #20]
 8004f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	444b      	add	r3, r9
 8004fa4:	106d      	asrs	r5, r5, #1
 8004fa6:	429d      	cmp	r5, r3
 8004fa8:	bf38      	it	cc
 8004faa:	461d      	movcc	r5, r3
 8004fac:	0553      	lsls	r3, r2, #21
 8004fae:	d531      	bpl.n	8005014 <__ssputs_r+0xa0>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	f000 fb63 	bl	800567c <_malloc_r>
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	b950      	cbnz	r0, 8004fd0 <__ssputs_r+0x5c>
 8004fba:	230c      	movs	r3, #12
 8004fbc:	f8ca 3000 	str.w	r3, [sl]
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fc6:	81a3      	strh	r3, [r4, #12]
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd0:	6921      	ldr	r1, [r4, #16]
 8004fd2:	464a      	mov	r2, r9
 8004fd4:	f000 fabe 	bl	8005554 <memcpy>
 8004fd8:	89a3      	ldrh	r3, [r4, #12]
 8004fda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe2:	81a3      	strh	r3, [r4, #12]
 8004fe4:	6126      	str	r6, [r4, #16]
 8004fe6:	6165      	str	r5, [r4, #20]
 8004fe8:	444e      	add	r6, r9
 8004fea:	eba5 0509 	sub.w	r5, r5, r9
 8004fee:	6026      	str	r6, [r4, #0]
 8004ff0:	60a5      	str	r5, [r4, #8]
 8004ff2:	463e      	mov	r6, r7
 8004ff4:	42be      	cmp	r6, r7
 8004ff6:	d900      	bls.n	8004ffa <__ssputs_r+0x86>
 8004ff8:	463e      	mov	r6, r7
 8004ffa:	6820      	ldr	r0, [r4, #0]
 8004ffc:	4632      	mov	r2, r6
 8004ffe:	4641      	mov	r1, r8
 8005000:	f000 fab6 	bl	8005570 <memmove>
 8005004:	68a3      	ldr	r3, [r4, #8]
 8005006:	1b9b      	subs	r3, r3, r6
 8005008:	60a3      	str	r3, [r4, #8]
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	4433      	add	r3, r6
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	2000      	movs	r0, #0
 8005012:	e7db      	b.n	8004fcc <__ssputs_r+0x58>
 8005014:	462a      	mov	r2, r5
 8005016:	f000 fba5 	bl	8005764 <_realloc_r>
 800501a:	4606      	mov	r6, r0
 800501c:	2800      	cmp	r0, #0
 800501e:	d1e1      	bne.n	8004fe4 <__ssputs_r+0x70>
 8005020:	6921      	ldr	r1, [r4, #16]
 8005022:	4650      	mov	r0, sl
 8005024:	f000 fabe 	bl	80055a4 <_free_r>
 8005028:	e7c7      	b.n	8004fba <__ssputs_r+0x46>
	...

0800502c <_svfiprintf_r>:
 800502c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005030:	4698      	mov	r8, r3
 8005032:	898b      	ldrh	r3, [r1, #12]
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	b09d      	sub	sp, #116	; 0x74
 8005038:	4607      	mov	r7, r0
 800503a:	460d      	mov	r5, r1
 800503c:	4614      	mov	r4, r2
 800503e:	d50e      	bpl.n	800505e <_svfiprintf_r+0x32>
 8005040:	690b      	ldr	r3, [r1, #16]
 8005042:	b963      	cbnz	r3, 800505e <_svfiprintf_r+0x32>
 8005044:	2140      	movs	r1, #64	; 0x40
 8005046:	f000 fb19 	bl	800567c <_malloc_r>
 800504a:	6028      	str	r0, [r5, #0]
 800504c:	6128      	str	r0, [r5, #16]
 800504e:	b920      	cbnz	r0, 800505a <_svfiprintf_r+0x2e>
 8005050:	230c      	movs	r3, #12
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	e0d1      	b.n	80051fe <_svfiprintf_r+0x1d2>
 800505a:	2340      	movs	r3, #64	; 0x40
 800505c:	616b      	str	r3, [r5, #20]
 800505e:	2300      	movs	r3, #0
 8005060:	9309      	str	r3, [sp, #36]	; 0x24
 8005062:	2320      	movs	r3, #32
 8005064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005068:	f8cd 800c 	str.w	r8, [sp, #12]
 800506c:	2330      	movs	r3, #48	; 0x30
 800506e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005218 <_svfiprintf_r+0x1ec>
 8005072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005076:	f04f 0901 	mov.w	r9, #1
 800507a:	4623      	mov	r3, r4
 800507c:	469a      	mov	sl, r3
 800507e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005082:	b10a      	cbz	r2, 8005088 <_svfiprintf_r+0x5c>
 8005084:	2a25      	cmp	r2, #37	; 0x25
 8005086:	d1f9      	bne.n	800507c <_svfiprintf_r+0x50>
 8005088:	ebba 0b04 	subs.w	fp, sl, r4
 800508c:	d00b      	beq.n	80050a6 <_svfiprintf_r+0x7a>
 800508e:	465b      	mov	r3, fp
 8005090:	4622      	mov	r2, r4
 8005092:	4629      	mov	r1, r5
 8005094:	4638      	mov	r0, r7
 8005096:	f7ff ff6d 	bl	8004f74 <__ssputs_r>
 800509a:	3001      	adds	r0, #1
 800509c:	f000 80aa 	beq.w	80051f4 <_svfiprintf_r+0x1c8>
 80050a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050a2:	445a      	add	r2, fp
 80050a4:	9209      	str	r2, [sp, #36]	; 0x24
 80050a6:	f89a 3000 	ldrb.w	r3, [sl]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 80a2 	beq.w	80051f4 <_svfiprintf_r+0x1c8>
 80050b0:	2300      	movs	r3, #0
 80050b2:	f04f 32ff 	mov.w	r2, #4294967295
 80050b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ba:	f10a 0a01 	add.w	sl, sl, #1
 80050be:	9304      	str	r3, [sp, #16]
 80050c0:	9307      	str	r3, [sp, #28]
 80050c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050c6:	931a      	str	r3, [sp, #104]	; 0x68
 80050c8:	4654      	mov	r4, sl
 80050ca:	2205      	movs	r2, #5
 80050cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d0:	4851      	ldr	r0, [pc, #324]	; (8005218 <_svfiprintf_r+0x1ec>)
 80050d2:	f7fb f8bd 	bl	8000250 <memchr>
 80050d6:	9a04      	ldr	r2, [sp, #16]
 80050d8:	b9d8      	cbnz	r0, 8005112 <_svfiprintf_r+0xe6>
 80050da:	06d0      	lsls	r0, r2, #27
 80050dc:	bf44      	itt	mi
 80050de:	2320      	movmi	r3, #32
 80050e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050e4:	0711      	lsls	r1, r2, #28
 80050e6:	bf44      	itt	mi
 80050e8:	232b      	movmi	r3, #43	; 0x2b
 80050ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ee:	f89a 3000 	ldrb.w	r3, [sl]
 80050f2:	2b2a      	cmp	r3, #42	; 0x2a
 80050f4:	d015      	beq.n	8005122 <_svfiprintf_r+0xf6>
 80050f6:	9a07      	ldr	r2, [sp, #28]
 80050f8:	4654      	mov	r4, sl
 80050fa:	2000      	movs	r0, #0
 80050fc:	f04f 0c0a 	mov.w	ip, #10
 8005100:	4621      	mov	r1, r4
 8005102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005106:	3b30      	subs	r3, #48	; 0x30
 8005108:	2b09      	cmp	r3, #9
 800510a:	d94e      	bls.n	80051aa <_svfiprintf_r+0x17e>
 800510c:	b1b0      	cbz	r0, 800513c <_svfiprintf_r+0x110>
 800510e:	9207      	str	r2, [sp, #28]
 8005110:	e014      	b.n	800513c <_svfiprintf_r+0x110>
 8005112:	eba0 0308 	sub.w	r3, r0, r8
 8005116:	fa09 f303 	lsl.w	r3, r9, r3
 800511a:	4313      	orrs	r3, r2
 800511c:	9304      	str	r3, [sp, #16]
 800511e:	46a2      	mov	sl, r4
 8005120:	e7d2      	b.n	80050c8 <_svfiprintf_r+0x9c>
 8005122:	9b03      	ldr	r3, [sp, #12]
 8005124:	1d19      	adds	r1, r3, #4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	9103      	str	r1, [sp, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	bfbb      	ittet	lt
 800512e:	425b      	neglt	r3, r3
 8005130:	f042 0202 	orrlt.w	r2, r2, #2
 8005134:	9307      	strge	r3, [sp, #28]
 8005136:	9307      	strlt	r3, [sp, #28]
 8005138:	bfb8      	it	lt
 800513a:	9204      	strlt	r2, [sp, #16]
 800513c:	7823      	ldrb	r3, [r4, #0]
 800513e:	2b2e      	cmp	r3, #46	; 0x2e
 8005140:	d10c      	bne.n	800515c <_svfiprintf_r+0x130>
 8005142:	7863      	ldrb	r3, [r4, #1]
 8005144:	2b2a      	cmp	r3, #42	; 0x2a
 8005146:	d135      	bne.n	80051b4 <_svfiprintf_r+0x188>
 8005148:	9b03      	ldr	r3, [sp, #12]
 800514a:	1d1a      	adds	r2, r3, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	9203      	str	r2, [sp, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	bfb8      	it	lt
 8005154:	f04f 33ff 	movlt.w	r3, #4294967295
 8005158:	3402      	adds	r4, #2
 800515a:	9305      	str	r3, [sp, #20]
 800515c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005228 <_svfiprintf_r+0x1fc>
 8005160:	7821      	ldrb	r1, [r4, #0]
 8005162:	2203      	movs	r2, #3
 8005164:	4650      	mov	r0, sl
 8005166:	f7fb f873 	bl	8000250 <memchr>
 800516a:	b140      	cbz	r0, 800517e <_svfiprintf_r+0x152>
 800516c:	2340      	movs	r3, #64	; 0x40
 800516e:	eba0 000a 	sub.w	r0, r0, sl
 8005172:	fa03 f000 	lsl.w	r0, r3, r0
 8005176:	9b04      	ldr	r3, [sp, #16]
 8005178:	4303      	orrs	r3, r0
 800517a:	3401      	adds	r4, #1
 800517c:	9304      	str	r3, [sp, #16]
 800517e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005182:	4826      	ldr	r0, [pc, #152]	; (800521c <_svfiprintf_r+0x1f0>)
 8005184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005188:	2206      	movs	r2, #6
 800518a:	f7fb f861 	bl	8000250 <memchr>
 800518e:	2800      	cmp	r0, #0
 8005190:	d038      	beq.n	8005204 <_svfiprintf_r+0x1d8>
 8005192:	4b23      	ldr	r3, [pc, #140]	; (8005220 <_svfiprintf_r+0x1f4>)
 8005194:	bb1b      	cbnz	r3, 80051de <_svfiprintf_r+0x1b2>
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	3307      	adds	r3, #7
 800519a:	f023 0307 	bic.w	r3, r3, #7
 800519e:	3308      	adds	r3, #8
 80051a0:	9303      	str	r3, [sp, #12]
 80051a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a4:	4433      	add	r3, r6
 80051a6:	9309      	str	r3, [sp, #36]	; 0x24
 80051a8:	e767      	b.n	800507a <_svfiprintf_r+0x4e>
 80051aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ae:	460c      	mov	r4, r1
 80051b0:	2001      	movs	r0, #1
 80051b2:	e7a5      	b.n	8005100 <_svfiprintf_r+0xd4>
 80051b4:	2300      	movs	r3, #0
 80051b6:	3401      	adds	r4, #1
 80051b8:	9305      	str	r3, [sp, #20]
 80051ba:	4619      	mov	r1, r3
 80051bc:	f04f 0c0a 	mov.w	ip, #10
 80051c0:	4620      	mov	r0, r4
 80051c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c6:	3a30      	subs	r2, #48	; 0x30
 80051c8:	2a09      	cmp	r2, #9
 80051ca:	d903      	bls.n	80051d4 <_svfiprintf_r+0x1a8>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0c5      	beq.n	800515c <_svfiprintf_r+0x130>
 80051d0:	9105      	str	r1, [sp, #20]
 80051d2:	e7c3      	b.n	800515c <_svfiprintf_r+0x130>
 80051d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d8:	4604      	mov	r4, r0
 80051da:	2301      	movs	r3, #1
 80051dc:	e7f0      	b.n	80051c0 <_svfiprintf_r+0x194>
 80051de:	ab03      	add	r3, sp, #12
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	462a      	mov	r2, r5
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <_svfiprintf_r+0x1f8>)
 80051e6:	a904      	add	r1, sp, #16
 80051e8:	4638      	mov	r0, r7
 80051ea:	f3af 8000 	nop.w
 80051ee:	1c42      	adds	r2, r0, #1
 80051f0:	4606      	mov	r6, r0
 80051f2:	d1d6      	bne.n	80051a2 <_svfiprintf_r+0x176>
 80051f4:	89ab      	ldrh	r3, [r5, #12]
 80051f6:	065b      	lsls	r3, r3, #25
 80051f8:	f53f af2c 	bmi.w	8005054 <_svfiprintf_r+0x28>
 80051fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051fe:	b01d      	add	sp, #116	; 0x74
 8005200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005204:	ab03      	add	r3, sp, #12
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	462a      	mov	r2, r5
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <_svfiprintf_r+0x1f8>)
 800520c:	a904      	add	r1, sp, #16
 800520e:	4638      	mov	r0, r7
 8005210:	f000 f87a 	bl	8005308 <_printf_i>
 8005214:	e7eb      	b.n	80051ee <_svfiprintf_r+0x1c2>
 8005216:	bf00      	nop
 8005218:	080058cc 	.word	0x080058cc
 800521c:	080058d6 	.word	0x080058d6
 8005220:	00000000 	.word	0x00000000
 8005224:	08004f75 	.word	0x08004f75
 8005228:	080058d2 	.word	0x080058d2

0800522c <_printf_common>:
 800522c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005230:	4616      	mov	r6, r2
 8005232:	4699      	mov	r9, r3
 8005234:	688a      	ldr	r2, [r1, #8]
 8005236:	690b      	ldr	r3, [r1, #16]
 8005238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800523c:	4293      	cmp	r3, r2
 800523e:	bfb8      	it	lt
 8005240:	4613      	movlt	r3, r2
 8005242:	6033      	str	r3, [r6, #0]
 8005244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005248:	4607      	mov	r7, r0
 800524a:	460c      	mov	r4, r1
 800524c:	b10a      	cbz	r2, 8005252 <_printf_common+0x26>
 800524e:	3301      	adds	r3, #1
 8005250:	6033      	str	r3, [r6, #0]
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	0699      	lsls	r1, r3, #26
 8005256:	bf42      	ittt	mi
 8005258:	6833      	ldrmi	r3, [r6, #0]
 800525a:	3302      	addmi	r3, #2
 800525c:	6033      	strmi	r3, [r6, #0]
 800525e:	6825      	ldr	r5, [r4, #0]
 8005260:	f015 0506 	ands.w	r5, r5, #6
 8005264:	d106      	bne.n	8005274 <_printf_common+0x48>
 8005266:	f104 0a19 	add.w	sl, r4, #25
 800526a:	68e3      	ldr	r3, [r4, #12]
 800526c:	6832      	ldr	r2, [r6, #0]
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	42ab      	cmp	r3, r5
 8005272:	dc26      	bgt.n	80052c2 <_printf_common+0x96>
 8005274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005278:	1e13      	subs	r3, r2, #0
 800527a:	6822      	ldr	r2, [r4, #0]
 800527c:	bf18      	it	ne
 800527e:	2301      	movne	r3, #1
 8005280:	0692      	lsls	r2, r2, #26
 8005282:	d42b      	bmi.n	80052dc <_printf_common+0xb0>
 8005284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005288:	4649      	mov	r1, r9
 800528a:	4638      	mov	r0, r7
 800528c:	47c0      	blx	r8
 800528e:	3001      	adds	r0, #1
 8005290:	d01e      	beq.n	80052d0 <_printf_common+0xa4>
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	68e5      	ldr	r5, [r4, #12]
 8005296:	6832      	ldr	r2, [r6, #0]
 8005298:	f003 0306 	and.w	r3, r3, #6
 800529c:	2b04      	cmp	r3, #4
 800529e:	bf08      	it	eq
 80052a0:	1aad      	subeq	r5, r5, r2
 80052a2:	68a3      	ldr	r3, [r4, #8]
 80052a4:	6922      	ldr	r2, [r4, #16]
 80052a6:	bf0c      	ite	eq
 80052a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052ac:	2500      	movne	r5, #0
 80052ae:	4293      	cmp	r3, r2
 80052b0:	bfc4      	itt	gt
 80052b2:	1a9b      	subgt	r3, r3, r2
 80052b4:	18ed      	addgt	r5, r5, r3
 80052b6:	2600      	movs	r6, #0
 80052b8:	341a      	adds	r4, #26
 80052ba:	42b5      	cmp	r5, r6
 80052bc:	d11a      	bne.n	80052f4 <_printf_common+0xc8>
 80052be:	2000      	movs	r0, #0
 80052c0:	e008      	b.n	80052d4 <_printf_common+0xa8>
 80052c2:	2301      	movs	r3, #1
 80052c4:	4652      	mov	r2, sl
 80052c6:	4649      	mov	r1, r9
 80052c8:	4638      	mov	r0, r7
 80052ca:	47c0      	blx	r8
 80052cc:	3001      	adds	r0, #1
 80052ce:	d103      	bne.n	80052d8 <_printf_common+0xac>
 80052d0:	f04f 30ff 	mov.w	r0, #4294967295
 80052d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d8:	3501      	adds	r5, #1
 80052da:	e7c6      	b.n	800526a <_printf_common+0x3e>
 80052dc:	18e1      	adds	r1, r4, r3
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	2030      	movs	r0, #48	; 0x30
 80052e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052e6:	4422      	add	r2, r4
 80052e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052f0:	3302      	adds	r3, #2
 80052f2:	e7c7      	b.n	8005284 <_printf_common+0x58>
 80052f4:	2301      	movs	r3, #1
 80052f6:	4622      	mov	r2, r4
 80052f8:	4649      	mov	r1, r9
 80052fa:	4638      	mov	r0, r7
 80052fc:	47c0      	blx	r8
 80052fe:	3001      	adds	r0, #1
 8005300:	d0e6      	beq.n	80052d0 <_printf_common+0xa4>
 8005302:	3601      	adds	r6, #1
 8005304:	e7d9      	b.n	80052ba <_printf_common+0x8e>
	...

08005308 <_printf_i>:
 8005308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800530c:	7e0f      	ldrb	r7, [r1, #24]
 800530e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005310:	2f78      	cmp	r7, #120	; 0x78
 8005312:	4691      	mov	r9, r2
 8005314:	4680      	mov	r8, r0
 8005316:	460c      	mov	r4, r1
 8005318:	469a      	mov	sl, r3
 800531a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800531e:	d807      	bhi.n	8005330 <_printf_i+0x28>
 8005320:	2f62      	cmp	r7, #98	; 0x62
 8005322:	d80a      	bhi.n	800533a <_printf_i+0x32>
 8005324:	2f00      	cmp	r7, #0
 8005326:	f000 80d8 	beq.w	80054da <_printf_i+0x1d2>
 800532a:	2f58      	cmp	r7, #88	; 0x58
 800532c:	f000 80a3 	beq.w	8005476 <_printf_i+0x16e>
 8005330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005338:	e03a      	b.n	80053b0 <_printf_i+0xa8>
 800533a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800533e:	2b15      	cmp	r3, #21
 8005340:	d8f6      	bhi.n	8005330 <_printf_i+0x28>
 8005342:	a101      	add	r1, pc, #4	; (adr r1, 8005348 <_printf_i+0x40>)
 8005344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005348:	080053a1 	.word	0x080053a1
 800534c:	080053b5 	.word	0x080053b5
 8005350:	08005331 	.word	0x08005331
 8005354:	08005331 	.word	0x08005331
 8005358:	08005331 	.word	0x08005331
 800535c:	08005331 	.word	0x08005331
 8005360:	080053b5 	.word	0x080053b5
 8005364:	08005331 	.word	0x08005331
 8005368:	08005331 	.word	0x08005331
 800536c:	08005331 	.word	0x08005331
 8005370:	08005331 	.word	0x08005331
 8005374:	080054c1 	.word	0x080054c1
 8005378:	080053e5 	.word	0x080053e5
 800537c:	080054a3 	.word	0x080054a3
 8005380:	08005331 	.word	0x08005331
 8005384:	08005331 	.word	0x08005331
 8005388:	080054e3 	.word	0x080054e3
 800538c:	08005331 	.word	0x08005331
 8005390:	080053e5 	.word	0x080053e5
 8005394:	08005331 	.word	0x08005331
 8005398:	08005331 	.word	0x08005331
 800539c:	080054ab 	.word	0x080054ab
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	1d1a      	adds	r2, r3, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	602a      	str	r2, [r5, #0]
 80053a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0a3      	b.n	80054fc <_printf_i+0x1f4>
 80053b4:	6820      	ldr	r0, [r4, #0]
 80053b6:	6829      	ldr	r1, [r5, #0]
 80053b8:	0606      	lsls	r6, r0, #24
 80053ba:	f101 0304 	add.w	r3, r1, #4
 80053be:	d50a      	bpl.n	80053d6 <_printf_i+0xce>
 80053c0:	680e      	ldr	r6, [r1, #0]
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	2e00      	cmp	r6, #0
 80053c6:	da03      	bge.n	80053d0 <_printf_i+0xc8>
 80053c8:	232d      	movs	r3, #45	; 0x2d
 80053ca:	4276      	negs	r6, r6
 80053cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d0:	485e      	ldr	r0, [pc, #376]	; (800554c <_printf_i+0x244>)
 80053d2:	230a      	movs	r3, #10
 80053d4:	e019      	b.n	800540a <_printf_i+0x102>
 80053d6:	680e      	ldr	r6, [r1, #0]
 80053d8:	602b      	str	r3, [r5, #0]
 80053da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053de:	bf18      	it	ne
 80053e0:	b236      	sxthne	r6, r6
 80053e2:	e7ef      	b.n	80053c4 <_printf_i+0xbc>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	6820      	ldr	r0, [r4, #0]
 80053e8:	1d19      	adds	r1, r3, #4
 80053ea:	6029      	str	r1, [r5, #0]
 80053ec:	0601      	lsls	r1, r0, #24
 80053ee:	d501      	bpl.n	80053f4 <_printf_i+0xec>
 80053f0:	681e      	ldr	r6, [r3, #0]
 80053f2:	e002      	b.n	80053fa <_printf_i+0xf2>
 80053f4:	0646      	lsls	r6, r0, #25
 80053f6:	d5fb      	bpl.n	80053f0 <_printf_i+0xe8>
 80053f8:	881e      	ldrh	r6, [r3, #0]
 80053fa:	4854      	ldr	r0, [pc, #336]	; (800554c <_printf_i+0x244>)
 80053fc:	2f6f      	cmp	r7, #111	; 0x6f
 80053fe:	bf0c      	ite	eq
 8005400:	2308      	moveq	r3, #8
 8005402:	230a      	movne	r3, #10
 8005404:	2100      	movs	r1, #0
 8005406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800540a:	6865      	ldr	r5, [r4, #4]
 800540c:	60a5      	str	r5, [r4, #8]
 800540e:	2d00      	cmp	r5, #0
 8005410:	bfa2      	ittt	ge
 8005412:	6821      	ldrge	r1, [r4, #0]
 8005414:	f021 0104 	bicge.w	r1, r1, #4
 8005418:	6021      	strge	r1, [r4, #0]
 800541a:	b90e      	cbnz	r6, 8005420 <_printf_i+0x118>
 800541c:	2d00      	cmp	r5, #0
 800541e:	d04d      	beq.n	80054bc <_printf_i+0x1b4>
 8005420:	4615      	mov	r5, r2
 8005422:	fbb6 f1f3 	udiv	r1, r6, r3
 8005426:	fb03 6711 	mls	r7, r3, r1, r6
 800542a:	5dc7      	ldrb	r7, [r0, r7]
 800542c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005430:	4637      	mov	r7, r6
 8005432:	42bb      	cmp	r3, r7
 8005434:	460e      	mov	r6, r1
 8005436:	d9f4      	bls.n	8005422 <_printf_i+0x11a>
 8005438:	2b08      	cmp	r3, #8
 800543a:	d10b      	bne.n	8005454 <_printf_i+0x14c>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	07de      	lsls	r6, r3, #31
 8005440:	d508      	bpl.n	8005454 <_printf_i+0x14c>
 8005442:	6923      	ldr	r3, [r4, #16]
 8005444:	6861      	ldr	r1, [r4, #4]
 8005446:	4299      	cmp	r1, r3
 8005448:	bfde      	ittt	le
 800544a:	2330      	movle	r3, #48	; 0x30
 800544c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005450:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005454:	1b52      	subs	r2, r2, r5
 8005456:	6122      	str	r2, [r4, #16]
 8005458:	f8cd a000 	str.w	sl, [sp]
 800545c:	464b      	mov	r3, r9
 800545e:	aa03      	add	r2, sp, #12
 8005460:	4621      	mov	r1, r4
 8005462:	4640      	mov	r0, r8
 8005464:	f7ff fee2 	bl	800522c <_printf_common>
 8005468:	3001      	adds	r0, #1
 800546a:	d14c      	bne.n	8005506 <_printf_i+0x1fe>
 800546c:	f04f 30ff 	mov.w	r0, #4294967295
 8005470:	b004      	add	sp, #16
 8005472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005476:	4835      	ldr	r0, [pc, #212]	; (800554c <_printf_i+0x244>)
 8005478:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800547c:	6829      	ldr	r1, [r5, #0]
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	f851 6b04 	ldr.w	r6, [r1], #4
 8005484:	6029      	str	r1, [r5, #0]
 8005486:	061d      	lsls	r5, r3, #24
 8005488:	d514      	bpl.n	80054b4 <_printf_i+0x1ac>
 800548a:	07df      	lsls	r7, r3, #31
 800548c:	bf44      	itt	mi
 800548e:	f043 0320 	orrmi.w	r3, r3, #32
 8005492:	6023      	strmi	r3, [r4, #0]
 8005494:	b91e      	cbnz	r6, 800549e <_printf_i+0x196>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	f023 0320 	bic.w	r3, r3, #32
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	2310      	movs	r3, #16
 80054a0:	e7b0      	b.n	8005404 <_printf_i+0xfc>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	f043 0320 	orr.w	r3, r3, #32
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	2378      	movs	r3, #120	; 0x78
 80054ac:	4828      	ldr	r0, [pc, #160]	; (8005550 <_printf_i+0x248>)
 80054ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054b2:	e7e3      	b.n	800547c <_printf_i+0x174>
 80054b4:	0659      	lsls	r1, r3, #25
 80054b6:	bf48      	it	mi
 80054b8:	b2b6      	uxthmi	r6, r6
 80054ba:	e7e6      	b.n	800548a <_printf_i+0x182>
 80054bc:	4615      	mov	r5, r2
 80054be:	e7bb      	b.n	8005438 <_printf_i+0x130>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	6826      	ldr	r6, [r4, #0]
 80054c4:	6961      	ldr	r1, [r4, #20]
 80054c6:	1d18      	adds	r0, r3, #4
 80054c8:	6028      	str	r0, [r5, #0]
 80054ca:	0635      	lsls	r5, r6, #24
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	d501      	bpl.n	80054d4 <_printf_i+0x1cc>
 80054d0:	6019      	str	r1, [r3, #0]
 80054d2:	e002      	b.n	80054da <_printf_i+0x1d2>
 80054d4:	0670      	lsls	r0, r6, #25
 80054d6:	d5fb      	bpl.n	80054d0 <_printf_i+0x1c8>
 80054d8:	8019      	strh	r1, [r3, #0]
 80054da:	2300      	movs	r3, #0
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	4615      	mov	r5, r2
 80054e0:	e7ba      	b.n	8005458 <_printf_i+0x150>
 80054e2:	682b      	ldr	r3, [r5, #0]
 80054e4:	1d1a      	adds	r2, r3, #4
 80054e6:	602a      	str	r2, [r5, #0]
 80054e8:	681d      	ldr	r5, [r3, #0]
 80054ea:	6862      	ldr	r2, [r4, #4]
 80054ec:	2100      	movs	r1, #0
 80054ee:	4628      	mov	r0, r5
 80054f0:	f7fa feae 	bl	8000250 <memchr>
 80054f4:	b108      	cbz	r0, 80054fa <_printf_i+0x1f2>
 80054f6:	1b40      	subs	r0, r0, r5
 80054f8:	6060      	str	r0, [r4, #4]
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	2300      	movs	r3, #0
 8005500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005504:	e7a8      	b.n	8005458 <_printf_i+0x150>
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	462a      	mov	r2, r5
 800550a:	4649      	mov	r1, r9
 800550c:	4640      	mov	r0, r8
 800550e:	47d0      	blx	sl
 8005510:	3001      	adds	r0, #1
 8005512:	d0ab      	beq.n	800546c <_printf_i+0x164>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	079b      	lsls	r3, r3, #30
 8005518:	d413      	bmi.n	8005542 <_printf_i+0x23a>
 800551a:	68e0      	ldr	r0, [r4, #12]
 800551c:	9b03      	ldr	r3, [sp, #12]
 800551e:	4298      	cmp	r0, r3
 8005520:	bfb8      	it	lt
 8005522:	4618      	movlt	r0, r3
 8005524:	e7a4      	b.n	8005470 <_printf_i+0x168>
 8005526:	2301      	movs	r3, #1
 8005528:	4632      	mov	r2, r6
 800552a:	4649      	mov	r1, r9
 800552c:	4640      	mov	r0, r8
 800552e:	47d0      	blx	sl
 8005530:	3001      	adds	r0, #1
 8005532:	d09b      	beq.n	800546c <_printf_i+0x164>
 8005534:	3501      	adds	r5, #1
 8005536:	68e3      	ldr	r3, [r4, #12]
 8005538:	9903      	ldr	r1, [sp, #12]
 800553a:	1a5b      	subs	r3, r3, r1
 800553c:	42ab      	cmp	r3, r5
 800553e:	dcf2      	bgt.n	8005526 <_printf_i+0x21e>
 8005540:	e7eb      	b.n	800551a <_printf_i+0x212>
 8005542:	2500      	movs	r5, #0
 8005544:	f104 0619 	add.w	r6, r4, #25
 8005548:	e7f5      	b.n	8005536 <_printf_i+0x22e>
 800554a:	bf00      	nop
 800554c:	080058dd 	.word	0x080058dd
 8005550:	080058ee 	.word	0x080058ee

08005554 <memcpy>:
 8005554:	440a      	add	r2, r1
 8005556:	4291      	cmp	r1, r2
 8005558:	f100 33ff 	add.w	r3, r0, #4294967295
 800555c:	d100      	bne.n	8005560 <memcpy+0xc>
 800555e:	4770      	bx	lr
 8005560:	b510      	push	{r4, lr}
 8005562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800556a:	4291      	cmp	r1, r2
 800556c:	d1f9      	bne.n	8005562 <memcpy+0xe>
 800556e:	bd10      	pop	{r4, pc}

08005570 <memmove>:
 8005570:	4288      	cmp	r0, r1
 8005572:	b510      	push	{r4, lr}
 8005574:	eb01 0402 	add.w	r4, r1, r2
 8005578:	d902      	bls.n	8005580 <memmove+0x10>
 800557a:	4284      	cmp	r4, r0
 800557c:	4623      	mov	r3, r4
 800557e:	d807      	bhi.n	8005590 <memmove+0x20>
 8005580:	1e43      	subs	r3, r0, #1
 8005582:	42a1      	cmp	r1, r4
 8005584:	d008      	beq.n	8005598 <memmove+0x28>
 8005586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800558a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800558e:	e7f8      	b.n	8005582 <memmove+0x12>
 8005590:	4402      	add	r2, r0
 8005592:	4601      	mov	r1, r0
 8005594:	428a      	cmp	r2, r1
 8005596:	d100      	bne.n	800559a <memmove+0x2a>
 8005598:	bd10      	pop	{r4, pc}
 800559a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800559e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055a2:	e7f7      	b.n	8005594 <memmove+0x24>

080055a4 <_free_r>:
 80055a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055a6:	2900      	cmp	r1, #0
 80055a8:	d044      	beq.n	8005634 <_free_r+0x90>
 80055aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ae:	9001      	str	r0, [sp, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f1a1 0404 	sub.w	r4, r1, #4
 80055b6:	bfb8      	it	lt
 80055b8:	18e4      	addlt	r4, r4, r3
 80055ba:	f000 f913 	bl	80057e4 <__malloc_lock>
 80055be:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <_free_r+0x94>)
 80055c0:	9801      	ldr	r0, [sp, #4]
 80055c2:	6813      	ldr	r3, [r2, #0]
 80055c4:	b933      	cbnz	r3, 80055d4 <_free_r+0x30>
 80055c6:	6063      	str	r3, [r4, #4]
 80055c8:	6014      	str	r4, [r2, #0]
 80055ca:	b003      	add	sp, #12
 80055cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055d0:	f000 b90e 	b.w	80057f0 <__malloc_unlock>
 80055d4:	42a3      	cmp	r3, r4
 80055d6:	d908      	bls.n	80055ea <_free_r+0x46>
 80055d8:	6825      	ldr	r5, [r4, #0]
 80055da:	1961      	adds	r1, r4, r5
 80055dc:	428b      	cmp	r3, r1
 80055de:	bf01      	itttt	eq
 80055e0:	6819      	ldreq	r1, [r3, #0]
 80055e2:	685b      	ldreq	r3, [r3, #4]
 80055e4:	1949      	addeq	r1, r1, r5
 80055e6:	6021      	streq	r1, [r4, #0]
 80055e8:	e7ed      	b.n	80055c6 <_free_r+0x22>
 80055ea:	461a      	mov	r2, r3
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	b10b      	cbz	r3, 80055f4 <_free_r+0x50>
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	d9fa      	bls.n	80055ea <_free_r+0x46>
 80055f4:	6811      	ldr	r1, [r2, #0]
 80055f6:	1855      	adds	r5, r2, r1
 80055f8:	42a5      	cmp	r5, r4
 80055fa:	d10b      	bne.n	8005614 <_free_r+0x70>
 80055fc:	6824      	ldr	r4, [r4, #0]
 80055fe:	4421      	add	r1, r4
 8005600:	1854      	adds	r4, r2, r1
 8005602:	42a3      	cmp	r3, r4
 8005604:	6011      	str	r1, [r2, #0]
 8005606:	d1e0      	bne.n	80055ca <_free_r+0x26>
 8005608:	681c      	ldr	r4, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	6053      	str	r3, [r2, #4]
 800560e:	4421      	add	r1, r4
 8005610:	6011      	str	r1, [r2, #0]
 8005612:	e7da      	b.n	80055ca <_free_r+0x26>
 8005614:	d902      	bls.n	800561c <_free_r+0x78>
 8005616:	230c      	movs	r3, #12
 8005618:	6003      	str	r3, [r0, #0]
 800561a:	e7d6      	b.n	80055ca <_free_r+0x26>
 800561c:	6825      	ldr	r5, [r4, #0]
 800561e:	1961      	adds	r1, r4, r5
 8005620:	428b      	cmp	r3, r1
 8005622:	bf04      	itt	eq
 8005624:	6819      	ldreq	r1, [r3, #0]
 8005626:	685b      	ldreq	r3, [r3, #4]
 8005628:	6063      	str	r3, [r4, #4]
 800562a:	bf04      	itt	eq
 800562c:	1949      	addeq	r1, r1, r5
 800562e:	6021      	streq	r1, [r4, #0]
 8005630:	6054      	str	r4, [r2, #4]
 8005632:	e7ca      	b.n	80055ca <_free_r+0x26>
 8005634:	b003      	add	sp, #12
 8005636:	bd30      	pop	{r4, r5, pc}
 8005638:	200009b0 	.word	0x200009b0

0800563c <sbrk_aligned>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4e0e      	ldr	r6, [pc, #56]	; (8005678 <sbrk_aligned+0x3c>)
 8005640:	460c      	mov	r4, r1
 8005642:	6831      	ldr	r1, [r6, #0]
 8005644:	4605      	mov	r5, r0
 8005646:	b911      	cbnz	r1, 800564e <sbrk_aligned+0x12>
 8005648:	f000 f8bc 	bl	80057c4 <_sbrk_r>
 800564c:	6030      	str	r0, [r6, #0]
 800564e:	4621      	mov	r1, r4
 8005650:	4628      	mov	r0, r5
 8005652:	f000 f8b7 	bl	80057c4 <_sbrk_r>
 8005656:	1c43      	adds	r3, r0, #1
 8005658:	d00a      	beq.n	8005670 <sbrk_aligned+0x34>
 800565a:	1cc4      	adds	r4, r0, #3
 800565c:	f024 0403 	bic.w	r4, r4, #3
 8005660:	42a0      	cmp	r0, r4
 8005662:	d007      	beq.n	8005674 <sbrk_aligned+0x38>
 8005664:	1a21      	subs	r1, r4, r0
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f8ac 	bl	80057c4 <_sbrk_r>
 800566c:	3001      	adds	r0, #1
 800566e:	d101      	bne.n	8005674 <sbrk_aligned+0x38>
 8005670:	f04f 34ff 	mov.w	r4, #4294967295
 8005674:	4620      	mov	r0, r4
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	200009b4 	.word	0x200009b4

0800567c <_malloc_r>:
 800567c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005680:	1ccd      	adds	r5, r1, #3
 8005682:	f025 0503 	bic.w	r5, r5, #3
 8005686:	3508      	adds	r5, #8
 8005688:	2d0c      	cmp	r5, #12
 800568a:	bf38      	it	cc
 800568c:	250c      	movcc	r5, #12
 800568e:	2d00      	cmp	r5, #0
 8005690:	4607      	mov	r7, r0
 8005692:	db01      	blt.n	8005698 <_malloc_r+0x1c>
 8005694:	42a9      	cmp	r1, r5
 8005696:	d905      	bls.n	80056a4 <_malloc_r+0x28>
 8005698:	230c      	movs	r3, #12
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	2600      	movs	r6, #0
 800569e:	4630      	mov	r0, r6
 80056a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a4:	4e2e      	ldr	r6, [pc, #184]	; (8005760 <_malloc_r+0xe4>)
 80056a6:	f000 f89d 	bl	80057e4 <__malloc_lock>
 80056aa:	6833      	ldr	r3, [r6, #0]
 80056ac:	461c      	mov	r4, r3
 80056ae:	bb34      	cbnz	r4, 80056fe <_malloc_r+0x82>
 80056b0:	4629      	mov	r1, r5
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7ff ffc2 	bl	800563c <sbrk_aligned>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	4604      	mov	r4, r0
 80056bc:	d14d      	bne.n	800575a <_malloc_r+0xde>
 80056be:	6834      	ldr	r4, [r6, #0]
 80056c0:	4626      	mov	r6, r4
 80056c2:	2e00      	cmp	r6, #0
 80056c4:	d140      	bne.n	8005748 <_malloc_r+0xcc>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	4631      	mov	r1, r6
 80056ca:	4638      	mov	r0, r7
 80056cc:	eb04 0803 	add.w	r8, r4, r3
 80056d0:	f000 f878 	bl	80057c4 <_sbrk_r>
 80056d4:	4580      	cmp	r8, r0
 80056d6:	d13a      	bne.n	800574e <_malloc_r+0xd2>
 80056d8:	6821      	ldr	r1, [r4, #0]
 80056da:	3503      	adds	r5, #3
 80056dc:	1a6d      	subs	r5, r5, r1
 80056de:	f025 0503 	bic.w	r5, r5, #3
 80056e2:	3508      	adds	r5, #8
 80056e4:	2d0c      	cmp	r5, #12
 80056e6:	bf38      	it	cc
 80056e8:	250c      	movcc	r5, #12
 80056ea:	4629      	mov	r1, r5
 80056ec:	4638      	mov	r0, r7
 80056ee:	f7ff ffa5 	bl	800563c <sbrk_aligned>
 80056f2:	3001      	adds	r0, #1
 80056f4:	d02b      	beq.n	800574e <_malloc_r+0xd2>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	442b      	add	r3, r5
 80056fa:	6023      	str	r3, [r4, #0]
 80056fc:	e00e      	b.n	800571c <_malloc_r+0xa0>
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	1b52      	subs	r2, r2, r5
 8005702:	d41e      	bmi.n	8005742 <_malloc_r+0xc6>
 8005704:	2a0b      	cmp	r2, #11
 8005706:	d916      	bls.n	8005736 <_malloc_r+0xba>
 8005708:	1961      	adds	r1, r4, r5
 800570a:	42a3      	cmp	r3, r4
 800570c:	6025      	str	r5, [r4, #0]
 800570e:	bf18      	it	ne
 8005710:	6059      	strne	r1, [r3, #4]
 8005712:	6863      	ldr	r3, [r4, #4]
 8005714:	bf08      	it	eq
 8005716:	6031      	streq	r1, [r6, #0]
 8005718:	5162      	str	r2, [r4, r5]
 800571a:	604b      	str	r3, [r1, #4]
 800571c:	4638      	mov	r0, r7
 800571e:	f104 060b 	add.w	r6, r4, #11
 8005722:	f000 f865 	bl	80057f0 <__malloc_unlock>
 8005726:	f026 0607 	bic.w	r6, r6, #7
 800572a:	1d23      	adds	r3, r4, #4
 800572c:	1af2      	subs	r2, r6, r3
 800572e:	d0b6      	beq.n	800569e <_malloc_r+0x22>
 8005730:	1b9b      	subs	r3, r3, r6
 8005732:	50a3      	str	r3, [r4, r2]
 8005734:	e7b3      	b.n	800569e <_malloc_r+0x22>
 8005736:	6862      	ldr	r2, [r4, #4]
 8005738:	42a3      	cmp	r3, r4
 800573a:	bf0c      	ite	eq
 800573c:	6032      	streq	r2, [r6, #0]
 800573e:	605a      	strne	r2, [r3, #4]
 8005740:	e7ec      	b.n	800571c <_malloc_r+0xa0>
 8005742:	4623      	mov	r3, r4
 8005744:	6864      	ldr	r4, [r4, #4]
 8005746:	e7b2      	b.n	80056ae <_malloc_r+0x32>
 8005748:	4634      	mov	r4, r6
 800574a:	6876      	ldr	r6, [r6, #4]
 800574c:	e7b9      	b.n	80056c2 <_malloc_r+0x46>
 800574e:	230c      	movs	r3, #12
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	4638      	mov	r0, r7
 8005754:	f000 f84c 	bl	80057f0 <__malloc_unlock>
 8005758:	e7a1      	b.n	800569e <_malloc_r+0x22>
 800575a:	6025      	str	r5, [r4, #0]
 800575c:	e7de      	b.n	800571c <_malloc_r+0xa0>
 800575e:	bf00      	nop
 8005760:	200009b0 	.word	0x200009b0

08005764 <_realloc_r>:
 8005764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005768:	4680      	mov	r8, r0
 800576a:	4614      	mov	r4, r2
 800576c:	460e      	mov	r6, r1
 800576e:	b921      	cbnz	r1, 800577a <_realloc_r+0x16>
 8005770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005774:	4611      	mov	r1, r2
 8005776:	f7ff bf81 	b.w	800567c <_malloc_r>
 800577a:	b92a      	cbnz	r2, 8005788 <_realloc_r+0x24>
 800577c:	f7ff ff12 	bl	80055a4 <_free_r>
 8005780:	4625      	mov	r5, r4
 8005782:	4628      	mov	r0, r5
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005788:	f000 f838 	bl	80057fc <_malloc_usable_size_r>
 800578c:	4284      	cmp	r4, r0
 800578e:	4607      	mov	r7, r0
 8005790:	d802      	bhi.n	8005798 <_realloc_r+0x34>
 8005792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005796:	d812      	bhi.n	80057be <_realloc_r+0x5a>
 8005798:	4621      	mov	r1, r4
 800579a:	4640      	mov	r0, r8
 800579c:	f7ff ff6e 	bl	800567c <_malloc_r>
 80057a0:	4605      	mov	r5, r0
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d0ed      	beq.n	8005782 <_realloc_r+0x1e>
 80057a6:	42bc      	cmp	r4, r7
 80057a8:	4622      	mov	r2, r4
 80057aa:	4631      	mov	r1, r6
 80057ac:	bf28      	it	cs
 80057ae:	463a      	movcs	r2, r7
 80057b0:	f7ff fed0 	bl	8005554 <memcpy>
 80057b4:	4631      	mov	r1, r6
 80057b6:	4640      	mov	r0, r8
 80057b8:	f7ff fef4 	bl	80055a4 <_free_r>
 80057bc:	e7e1      	b.n	8005782 <_realloc_r+0x1e>
 80057be:	4635      	mov	r5, r6
 80057c0:	e7df      	b.n	8005782 <_realloc_r+0x1e>
	...

080057c4 <_sbrk_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d06      	ldr	r5, [pc, #24]	; (80057e0 <_sbrk_r+0x1c>)
 80057c8:	2300      	movs	r3, #0
 80057ca:	4604      	mov	r4, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	f7fb fd20 	bl	8001214 <_sbrk>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_sbrk_r+0x1a>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_sbrk_r+0x1a>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	200009b8 	.word	0x200009b8

080057e4 <__malloc_lock>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__malloc_lock+0x8>)
 80057e6:	f000 b811 	b.w	800580c <__retarget_lock_acquire_recursive>
 80057ea:	bf00      	nop
 80057ec:	200009bc 	.word	0x200009bc

080057f0 <__malloc_unlock>:
 80057f0:	4801      	ldr	r0, [pc, #4]	; (80057f8 <__malloc_unlock+0x8>)
 80057f2:	f000 b80c 	b.w	800580e <__retarget_lock_release_recursive>
 80057f6:	bf00      	nop
 80057f8:	200009bc 	.word	0x200009bc

080057fc <_malloc_usable_size_r>:
 80057fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005800:	1f18      	subs	r0, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	bfbc      	itt	lt
 8005806:	580b      	ldrlt	r3, [r1, r0]
 8005808:	18c0      	addlt	r0, r0, r3
 800580a:	4770      	bx	lr

0800580c <__retarget_lock_acquire_recursive>:
 800580c:	4770      	bx	lr

0800580e <__retarget_lock_release_recursive>:
 800580e:	4770      	bx	lr

08005810 <_init>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr

0800581c <_fini>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr
